SELECT cohort_months_since_first_order,
       first_order_creation_month,
       COUNT(DISTINCT customer_id)
FROM (SELECT CASE
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 0 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 1 THEN '1-2'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 2 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 3 THEN '3-4'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 4 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 5 THEN '5-6'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 6 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 7 THEN '7-8'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 8 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 9 THEN '9-10'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 10 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 11 THEN '11-12'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 12 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 13 THEN '13-14'
                 WHEN DATEDIFF('MONTH', first_order_creation_time, creation_time) = 14 OR
                      DATEDIFF('MONTH', first_order_creation_time, creation_time) = 15 THEN '15-16'
                 ELSE NULL END as                                               cohort_months_since_first_order,
             TO_CHAR(DATE_TRUNC('month', first_order_creation_time), 'YYYY-MM') first_order_creation_month,
             o.customer_id
                                                                                â€‹
      FROM orders o
               LEFT JOIN
           (SELECT customer_id, min(creation_time) first_order_creation_time
            FROM orders
            GROUP BY 1) fo on o.customer_id = fo.customer_id
      WHERE o.country_code = 'ES'
        AND first_order_creation_month >= '2018-05'
        AND final_status = 'DeliveredStatus')
GROUP BY 1, 2
ORDER BY 2, 1;

WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE orders.activation_time_local < '2019-10-01 00:00:00.000000'
                                        AND orders.final_status = 'DeliveredStatus'
                                        --AND (NOT COALESCE(orders.is_marketplace , FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CASE
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                0 THEN '0'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                1 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                2 THEN '1-2'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                3 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                4 THEN '3-4'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                5 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                6 THEN '5-6'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                7 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                8 THEN '7-8'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                9 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                10 THEN '9-10'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                11 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                12 THEN '11-12'
           WHEN DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                13 OR
                DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, orders.activation_time_local) =
                14 THEN '13-14'
           ELSE NULL END                                                                 as "users.cohort_months_since_first_order_after_condition" COUNT(DISTINCT orders.customer_id ) AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND orders.country_code = 'ES'

GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;


WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                         AND orders.is_food
                                       GROUP BY 1, 4),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                        AND orders.is_food =
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT)                               AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND orders.is_food
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;


WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.activation_time_local)      AS "min_creation_time_local",
                                              MIN(orders.activation_time)            AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END               AS "payment_method",
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '6. Free Order'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.3 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '5. <30% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.3 AND
                                                       orders.first_order = TRUE THEN '4. 30% - 50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.7 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.5 AND
                                                       orders.first_order = TRUE THEN '3. 50% - 70% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.7 AND
                                                       orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name LIKE '%Organic%' OR
                                                               network_name LIKE '%Homepage%' OR network_name = '' OR
                                                               network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name NOT LIKE '%Organic%' AND
                                                               network_name NOT LIKE '%Homepage%' AND
                                                               network_name <> '' AND network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Web Organic'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Web Paid'
                                                      WHEN promotions.type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel

                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    JOIN users ON orders.customer_id = users.id


                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND is_marketplace = false
                                             --  AND users.deleted = 0
                                             AND orders.deleted = 0
                                           --AND (country_code = 'ES')
                                       ) as Channel on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6, 7, 8),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT)                               AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       first_orders_category_derived.payment_method,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) >= 0))
  AND first_orders_category_derived.city_code = 'BCN'
  AND "first_orders_category_derived.first_order_local_month" = '2017-11'
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5, 6, 7
ORDER BY 1, 2, 3, 4, 5, 6, 7;


WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                         AND country_code = 'ES'
                                       GROUP BY 1, 4),

     viewers AS (SELECT customer_id,
                        creation_time
                 FROM log_mp_screen_view_stores as vs
                          JOIN geography ON vs.city_code = geography.code
                 WHERE country_code = 'ES')

SELECT first_orders_category_derived.country_code   AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                           AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     viewers.creation_time) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT viewers.customer_id)          AS "orders.number_of_viewers_users"
FROM (SELECT customer_id, creation_time
      FROM log_mp_screen_view_stores
               JOIN geography ON log_mp_screen_view_stores.city_code = geography.code
      WHERE country_code = 'ES') AS viewers
         LEFT JOIN public.users AS users ON viewers.customer_id = users.id
         INNER JOIN first_orders_category_derived ON viewers.customer_id = first_orders_category_derived.customer_id
WHERE ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local, viewers.creation_time) AS INT) IN
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND country_code = 'ES'
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

SELECT *
FROM log_mp_store_impression;


WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code
                                       FROM public.orders
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                         AND city_code IN ('BCN', 'MAD', 'LIM', 'BUE')
                                       GROUP BY 1, 4, 5)

SELECT
    --first_orders_category_derived.country_code  AS "orders.country_code",
    --first_orders_category_derived.city_code AS "orders.city_code",
    CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                  orders.activation_time_local) AS INT)                               AS "users.cohort_months_since_first_order_after_condition",
    (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                   WHEN (orders.final_status = 'DeliveredStatus')
                                                                       THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                   ELSE NULL END, 0) *
                                                      (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(CAST(
            CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)), 15),
                                                                                                         16) AS DECIMAL(38, 0)) *
                                                                                             1.0e8 + CAST(STRTOL(
            RIGHT(MD5(CAST(CASE
                               WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                               ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(LEFT(
                                                                                                                           MD5(
                                                                                                                                   CAST(
                                                                                                                                           CASE
                                                                                                                                               WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                                   THEN orders.id
                                                                                                                                               ELSE NULL END AS VARCHAR)),
                                                                                                                           15),
                                                                                                                   16) AS DECIMAL(38, 0)) *
                                                                                                       1.0e8 +
                                                                                                       CAST(STRTOL(
                                                                                                               RIGHT(
                                                                                                                       MD5(
                                                                                                                               CAST(
                                                                                                                                       CASE
                                                                                                                                           WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                               THEN orders.id
                                                                                                                                           ELSE NULL END AS VARCHAR)),
                                                                                                                       15),
                                                                                                               16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                       CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                       WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                           THEN orders.id
                                                                                                       ELSE NULL END)),
                                                                                   0) AS "orders.average_total_purchase_eur"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
GROUP BY 1
ORDER BY 1;

WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('YEAR', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT)                               AS "users.cohort_years_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) >= 0))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;



WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT)                               AS "users.cohort_months_since_first_order_after_condition",
       orders.customer_id                                                                AS "orders.active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND "orders.country_code" = 'ES'
  AND "first_orders_category_derived.first_order_local_month" = '2019-10'
  AND "users.cohort_months_since_first_order_after_condition" = 0
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3, 4
ORDER BY 1, 2, 3;

SELECT TO_CHAR(DATE_TRUNC('month', "min_creation_time_local"), 'YYYY-MM'),
       COUNT(DISTINCT "customer_id")
FROM (SELECT orders.customer_id                AS "customer_id",
             MIN(orders.activation_time_local) AS "min_creation_time_local",
             MIN(orders.activation_time)       AS "min_creation_time",
             orders.country_code

      FROM public.orders
               LEFT JOIN public.users ON public.orders.customer_id = public.users.id

      WHERE public.orders.final_status = 'DeliveredStatus'
        AND orders.first_order
--AND (NOT COALESCE(orders.is_marketplace , FALSE))
      GROUP BY 1, 4) subtable
WHERE country_code = 'ES'
GROUP BY 1;



SELECT COUNT(DISTINCT subtable.customer_id)
FROM (SELECT customer_id,
             MIN(orders.activation_time_local) AS min_creation_time_local
      FROM orders
      WHERE 1 = 1
        AND final_status = 'DeliveredStatus'
        AND country_code = 'AR'
        AND first_order
        AND is_food
      GROUP BY 1
      ORDER BY 1) AS subtable
WHERE min_creation_time_local BETWEEN '2018-10-01 00:00:00.000000' AND '2018-11-01 00:00:00.000000';

SELECT "orders.number_of_active_users"
FROM (WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                                    MIN(orders.activation_time_local)      AS "min_creation_time_local",
                                                    MIN(orders.activation_time)            AS "min_creation_time",
                                                    orders.city_code,
                                                    orders.country_code,
                                                    orders.mcd_partner                     AS "mcdonalds_first_order",
                                                    orders.is_food                         AS "is_food_first_order",
                                                    Channel,
                                                    CASE
                                                        WHEN payment_method = 'CASH' AND orders.first_order = TRUE
                                                            THEN 'CASH'
                                                        WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                            THEN 'CREDIT_CARD'
                                                        WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                             orders.first_order = TRUE
                                                            THEN 'Other' END               AS "payment_method",
                                                    CASE
                                                        WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                            THEN '6. Free Order'
                                                        WHEN orders.gtv <=
                                                             (orders.total_purchase + orders.delivery_fee +
                                                              orders.service_fee +
                                                              orders.basket_surcharge) * 0.3 AND orders.gtv > 0 AND
                                                             orders.first_order = TRUE THEN '5. <30% of Full Price Paid'
                                                        WHEN orders.gtv <=
                                                             (orders.total_purchase + orders.delivery_fee +
                                                              orders.service_fee +
                                                              orders.basket_surcharge) * 0.5 AND
                                                             orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                           orders.service_fee +
                                                                           orders.basket_surcharge) * 0.3 AND
                                                             orders.first_order = TRUE
                                                            THEN '4. 30% - 50% of Full Price Paid'
                                                        WHEN orders.gtv <=
                                                             (orders.total_purchase + orders.delivery_fee +
                                                              orders.service_fee +
                                                              orders.basket_surcharge) * 0.7 AND
                                                             orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                           orders.service_fee +
                                                                           orders.basket_surcharge) * 0.5 AND
                                                             orders.first_order = TRUE
                                                            THEN '3. 50% - 70% of Full Price Paid'
                                                        WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                           orders.service_fee +
                                                                           orders.basket_surcharge) AND
                                                             orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                           orders.service_fee +
                                                                           orders.basket_surcharge) * 0.7 AND
                                                             orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                        WHEN orders.gtv >=
                                                             (orders.total_purchase + orders.delivery_fee +
                                                              orders.service_fee +
                                                              orders.basket_surcharge)
                                                            AND orders.first_order = TRUE
                                                            THEN '1. Order Fully Paid' END AS promotion
                                             FROM public.orders
                                                      LEFT JOIN public.store_addresses
                                                                ON public.store_addresses.id = public.orders.store_address_id
                                                      LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                      LEFT JOIN public.order_pricing_applied_discounts
                                                                ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                      LEFT JOIN public.promocode_uses
                                                                ON public.order_pricing_applied_discounts.promocode_use_id =
                                                                   public.promocode_uses.id
                                                      LEFT JOIN public.promocodes
                                                                ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                      LEFT JOIN public.promotions
                                                                ON public.promocodes.promotion_id = public.promotions.id
                                                      LEFT JOIN public.bought_products
                                                                ON public.orders.id = public.bought_products.order_id
                                                      LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                      LEFT JOIN (
                                                 SELECT orders.customer_id,
                                                        CASE
                                                            WHEN os IN ('IOS', 'ANDROID')
                                                                AND
                                                                 (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                                AND (network_name LIKE '%Organic%' OR
                                                                     network_name LIKE '%Homepage%' OR
                                                                     network_name = '' OR
                                                                     network_name IS NULL) THEN 'Mobile Organic'
                                                            WHEN os IN ('IOS', 'ANDROID')
                                                                AND
                                                                 (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                                AND (network_name NOT LIKE '%Organic%' AND
                                                                     network_name NOT LIKE '%Homepage%' AND
                                                                     network_name <> '' AND network_name IS NOT NULL)
                                                                THEN 'Mobile Paid'
                                                            WHEN os NOT IN ('IOS', 'ANDROID')
                                                                AND
                                                                 (orders.utm_source IS NULL OR orders.utm_source = '')
                                                                AND
                                                                 (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                                AND users.utm_source IS NULL THEN 'Web Organic'
                                                            WHEN os NOT IN ('IOS', 'ANDROID')
                                                                AND
                                                                 (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                                AND
                                                                 (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                                THEN 'Web Paid'
                                                            WHEN promotions.type = 'MGM' THEN 'MGM'
                                                            ELSE 'Others' END as Channel

                                                 FROM orders
                                                          LEFT JOIN (
                                                     select order_id,
                                                            min(promocode_use_id) as promocode_use_id
                                                     from order_pricing_applied_discounts
                                                     group by 1) as selected_promo
                                                                    ON orders.id = selected_promo.order_id
                                                          LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                          LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                          LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                          JOIN users ON orders.customer_id = users.id


                                                 WHERE orders.first_order
                                                   AND final_status = 'DeliveredStatus'
                                                   AND is_marketplace = false
                                                   --  AND users.deleted = 0
                                                   AND orders.deleted = 0
                                                 --AND (country_code = 'ES')
                                             ) as Channel on orders.customer_id = Channel.customer_id
                                             WHERE orders.first_order
                                               AND public.orders.final_status = 'DeliveredStatus'
                                             GROUP BY 1, 4, 5, 6, 7, 8, 9, 10),

           last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                                   MAX(orders.activation_time_local) AS "max_creation_time"
                                            FROM public.orders
                                            WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                              AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                            GROUP BY 1)

      SELECT first_orders_category_derived.country_code          AS "orders.country_code",
             first_orders_category_derived.city_code             AS "orders.city_code",
             TO_CHAR(DATE_TRUNC('MONTH', first_orders_category_derived.min_creation_time_local),
                     'YYYY-MM')                                  AS "first_orders_category_derived.first_order_local_month",
             CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                           orders.activation_time_local) AS INT) AS "cohort_months_since_first_order_after_condition",
             "mcdonalds_first_order",
             --orders.mcd_partner AS "mcdonalds_order",
             "is_food_first_order",
             --orders.is_food AS "is_food_orders",
             Channel,
             first_orders_category_derived.payment_method,
             first_orders_category_derived.promotion,
             orders.customer_id                                  AS "orders.number_of_active_users",
             COUNT(DISTINCT CASE
                                WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                                ELSE NULL END)                   AS "orders.number_of_delivered_orders",
             COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                           WHEN (orders.final_status = 'DeliveredStatus')
                                                                               THEN (1.0 * orders.total_purchase / orders.exchange_rate_currency)
                                                                           ELSE NULL END, 0) *
                                                              (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(
                                                                                                                         MD5(
                                                                                                                                 CAST(
                                                                                                                                         CASE
                                                                                                                                             WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                                 THEN orders.id
                                                                                                                                             ELSE NULL END AS VARCHAR)),
                                                                                                                         15),
                                                                                                                 16) AS DECIMAL(38, 0)) *
                                                                                                     1.0e8 +
                                                  CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                 WHEN (orders.final_status = 'DeliveredStatus')
                                                                                     THEN orders.id
                                                                                 ELSE NULL END AS VARCHAR)), 15),
                                                              16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(LEFT(
                                                                                                                         MD5(
                                                                                                                                 CAST(
                                                                                                                                         CASE
                                                                                                                                             WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                                 THEN orders.id
                                                                                                                                             ELSE NULL END AS VARCHAR)),
                                                                                                                         15),
                                                                                                                 16) AS DECIMAL(38, 0)) *
                                                                                                     1.0e8 +
                                                                                                     CAST(STRTOL(
                                                                                                             RIGHT(MD5(
                                                                                                                           CAST(
                                                                                                                                   CASE
                                                                                                                                       WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                           THEN orders.id
                                                                                                                                       ELSE NULL END AS VARCHAR)),
                                                                                                                   15),
                                                                                                             16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                               CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0),
                      0)                                         AS "orders.total_gmv_eur"
             -- COUNT(DISTINCT CASE
             --                    WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
             --                                 'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
             --                                                       'YYYY-MM') THEN orders.customer_id
             --                    ELSE NULL END) AS "last_orders_category_derived.last_order_local_month"
      FROM public.orders AS orders
               LEFT JOIN public.users AS users ON orders.customer_id = users.id
               INNER JOIN first_orders_category_derived
                          ON orders.customer_id = first_orders_category_derived.customer_id
--INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
      WHERE (orders.final_status = 'DeliveredStatus')
        AND (NOT COALESCE(orders.is_marketplace, FALSE))
        AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                            orders.activation_time_local) AS INT) >= 0))
        AND "first_orders_category_derived.first_order_local_month" = '2018-10'

        AND "cohort_months_since_first_order_after_condition" = 0
        AND "orders.country_code" = 'AR'

        AND 1 = 1 -- no filter on 'new_cohorts_derived.first_order_is_mcdonalds'

        AND 1 = 1 -- no filter on 'new_cohorts_derived.all_orders_are_mcdonalds'

        AND is_food_first_order
        AND 1 = 1 -- no filter on 'new_cohorts_derived.all_orders_are_food'

      GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      ORDER BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) subtable;

SELECT mcd_partner
FROM orders
WHERE customer_id = 3055413;

WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT)                               AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.activation_time_local) AS INT) >= 0)
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

SELECT vertical,
       COUNT(DISTINCT id)
FROM orders
WHERE creation_time_local BETWEEN '2019-10-01 00:00:00.000000' AND '2019-11-01 00:00:00.000000'
GROUP BY 1;

SELECT TO_CHAR(DATE_TRUNC('month', "min_creation_time_local"), 'YYYY-MM') AS local_month,
       COUNT(DISTINCT customer_id)
FROM (SELECT orders.customer_id                AS "customer_id",
             MIN(orders.activation_time_local) AS "min_creation_time_local",
             MIN(orders.activation_time)       AS "min_creation_time",
             orders.country_code

      FROM public.orders
               LEFT JOIN public.users ON public.orders.customer_id = public.users.id

      WHERE public.orders.final_status = 'DeliveredStatus'
        AND orders.first_order
        AND orders.is_marketplace
      GROUP BY 1, 4) st1
WHERE local_month = '2019-07'
GROUP BY 1;


--2nd & 3rd Order
WITH complete_orders_table AS (
    SELECT *,
           RANK() OVER (PARTITION BY customer_id ORDER BY activation_time_local) AS order_ranking,
           FLOOR((datediff('DAY', first_delivered_order_time, activation_time_local)) * 1.00 /
                 28)                                                             AS cohort_rolling_months_since_first_order,
           current_date                                                          AS update_date,
           FLOOR((datediff('DAY', first_delivered_order_time, update_date)) * 1.00 /
                 28)                                                             AS update_date_rolling_months_since_first_order
    FROM (
             SELECT customer_id,
                    id,
                    first_order,
                    activation_time_local,
                    country_code,
                    MIN(CASE WHEN first_order = TRUE THEN activation_time_local ELSE NULL END)
                    OVER (PARTITION BY customer_id) AS first_delivered_order_time/*,
                    CASE
                        WHEN activation_time_local >= first_delivered_order_time THEN TRUE
                        ELSE FALSE END              AS delivered_after_first_order*/
             FROM orders
             WHERE 1 = 1
               AND final_status = 'DeliveredStatus'
             ORDER BY 1, 2) st1
    --WHERE delivered_after_first_order = TRUE
)
SELECT country_code,
       TO_CHAR(DATE_TRUNC('month', first_delivered_order_time)
           , 'YYYY-MM')                                                  AS first_order_local_month,
       cohort_rolling_months_since_first_order,
       update_date_rolling_months_since_first_order,
       CASE
           WHEN (RANK()
                 OVER (PARTITION BY country_code, first_order_local_month, cohort_rolling_months_since_first_order ORDER BY update_date_rolling_months_since_first_order)) =
                2 THEN TRUE
           ELSE FALSE END                                                AS first_cohort_part,
       CASE
           WHEN update_date_rolling_months_since_first_order > cohort_rolling_months_since_first_order THEN TRUE
           ELSE FALSE END                                                AS cohort_month_completed,
    /*CASE WHEN update_date_rolling_months_since_first_order =
    MAX(update_date_rolling_months_since_first_order) OVER (PARTITION BY country_code,first_order_local_month,cohort_rolling_months_since_first_order),*/
       COUNT(DISTINCT customer_id)                                       AS number_of_active_users,
       COUNT(DISTINCT id)                                                AS number_of_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 2 THEN id ELSE NULL END) AS total_2nd_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 3 THEN id ELSE NULL END) AS total_3rd_orders
FROM complete_orders_table
WHERE 1 = 1
  AND cohort_rolling_months_since_first_order BETWEEN 0 AND 16
  AND first_order_local_month > dateadd('month', -16, current_date)
  AND country_code NOT IN ('BR', 'CL')
GROUP BY 1, 2, 3, 4
ORDER BY 1, 2, 3, 4;

WITH first_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                              MIN(orders.activation_time_local) AS "min_creation_time_local",
                                              MIN(orders.activation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)

SELECT DISTINCT orders.customer_id
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code = 'PT'
  AND orders.activation_time_local < '2020-03-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.activation_time_local) AS INT) = 0))
  AND TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
              'YYYY-MM') = '2020-02';

SELECT *
FROM orders
WHERE customer_id = 9607480;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

    /* last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1),*/

     second_and_third_orders AS (SELECT customer_id,
                                        MIN(CASE WHEN order_ranking = 1 THEN creation_time_local ELSE NULL END) AS first_order_time,
                                        MIN(CASE WHEN order_ranking = 2 THEN creation_time_local ELSE NULL END) AS second_order_time,
                                        MIN(CASE WHEN order_ranking = 3 THEN creation_time_local ELSE NULL END) AS third_order_time,
                                        DATEDIFF('month', first_order_time, second_order_time)                  AS second_order_cohorts_month_since_first_order,
                                        DATEDIFF('month', first_order_time, third_order_time)                   AS third_order_cohorts_month_since_first_order


                                 FROM (
                                          SELECT customer_id,
                                                 id,
                                                 creation_time_local,
                                                 RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking
                                          FROM orders
                                          WHERE final_status = 'DeliveredStatus') AS orders_ranked
                                 WHERE order_ranking IN (1, 2, 3)
                                 GROUP BY 1
     )

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value",
    /*COUNT(DISTINCT CASE
                       WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                    'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                         'YYYY-MM') THEN orders.customer_id
                       ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month",*/
       COUNT(DISTINCT CASE
                          WHEN second_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_2nd_orders_delivered,
       COUNT(DISTINCT CASE
                          WHEN third_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_3rd_orders_delivered
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
    -- INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
         INNER JOIN second_and_third_orders ON orders.customer_id = second_and_third_orders.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-03-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name LIKE '%Organic%' OR
                                                               network_name LIKE '%Homepage%' OR network_name = '' OR
                                                               network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name NOT LIKE '%Organic%' AND
                                                               network_name NOT LIKE '%Homepage%' AND
                                                               network_name <> '' AND network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Web Organic'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Web Paid'
                                                      WHEN promotions.type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel

                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    JOIN users ON orders.customer_id = users.id


                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND is_marketplace = false
                                             --  AND users.deleted = 0
                                             AND orders.deleted = 0
                                           --AND (country_code = 'ES')
                                       ) as Channel on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END        AS "payment_method"
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                  --AND (NOT COALESCE(orders.is_marketplace , FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.payment_method,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.payment_method IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.creation_time_local)        AS "min_creation_time_local",
                                              MIN(orders.creation_time)              AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '6. Free Order'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.3 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '5. <30% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.3 AND
                                                       orders.first_order = TRUE THEN '4. 30% - 50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.7 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.5 AND
                                                       orders.first_order = TRUE THEN '3. 50% - 70% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.7 AND
                                                       orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                        AND (NOT COALESCE(orders.is_marketplace, FALSE))
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND (NOT COALESCE(orders.is_marketplace, FALSE))
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 17, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.promotion IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH complete_orders_table AS (
    SELECT *,
           RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking,
           FLOOR((datediff('DAY', first_delivered_order_time, creation_time_local)) * 1.00 /
                 14)                                                           AS cohort_rolling_months_since_first_order,
           current_date                                                        AS update_date,
           FLOOR((datediff('DAY', first_delivered_order_time, update_date)) * 1.00 /
                 14)                                                           AS update_date_rolling_months_since_first_order

    FROM (
             SELECT customer_id,
                    id,
                    first_order,
                    creation_time_local,
                    country_code,
                    MIN(CASE WHEN first_order = TRUE THEN creation_time_local ELSE NULL END)
                    OVER (PARTITION BY customer_id) AS first_delivered_order_time,
                    CASE
                        WHEN creation_time_local >= first_delivered_order_time THEN TRUE
                        ELSE FALSE END              AS delivered_after_first_order
             FROM orders
             WHERE 1 = 1
               AND final_status = 'DeliveredStatus'
             ORDER BY 1, 2) st1

    WHERE delivered_after_first_order = TRUE
),

     first_order_specific AS (
         SELECT customer_id, country_code
         FROM complete_orders_table
         WHERE first_order
     )


SELECT first_order_specific.country_code,
       TO_CHAR(DATE_TRUNC('month', first_delivered_order_time)
           , 'YYYY-MM')                                                  AS first_order_local_month,
       cohort_rolling_months_since_first_order,
       update_date_rolling_months_since_first_order,
       COUNT(DISTINCT complete_orders_table.customer_id)                 AS number_of_active_users,
       COUNT(DISTINCT id)                                                AS number_of_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 2 THEN id ELSE NULL END) AS total_2nd_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 3 THEN id ELSE NULL END) AS total_3rd_orders

FROM complete_orders_table
         INNER JOIN first_order_specific ON first_order_specific.customer_id = complete_orders_table.customer_id
WHERE 1 = 1
  AND cohort_rolling_months_since_first_order BETWEEN 0 AND 16
  AND first_order_local_month > dateadd('month', -16, update_date)
  AND update_date_rolling_months_since_first_order >= 0
  AND complete_orders_table.country_code NOT IN ('BR', 'CL')
  --AND cohort_rolling_months_since_first_order = 0
  --AND first_order_local_month = '2019-10'
  --AND first_order_specific.country_code = 'ES'

GROUP BY 1, 2, 3, 4
ORDER BY 1, 2, 3, 4;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name LIKE '%Organic%' OR
                                                               network_name LIKE '%Homepage%' OR network_name = '' OR
                                                               network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name NOT LIKE '%Organic%' AND
                                                               network_name NOT LIKE '%Homepage%' AND
                                                               network_name <> '' AND network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Web Organic'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Web Paid'
                                                      WHEN promotions.type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel

                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    JOIN users ON orders.customer_id = users.id


                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             --AND is_marketplace = false
                                             --  AND users.deleted = 0
                                             AND orders.deleted = 0
                                           --AND (country_code = 'ES')
                                       ) as Channel on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END        AS "payment_method"
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.payment_method,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.payment_method IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.creation_time_local)        AS "min_creation_time_local",
                                              MIN(orders.creation_time)              AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '6. Free Order'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.3 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '5. <30% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.3 AND
                                                       orders.first_order = TRUE THEN '4. 30% - 50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.7 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.5 AND
                                                       orders.first_order = TRUE THEN '3. 50% - 70% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.7 AND
                                                       orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 17, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.promotion IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code,
                                              orders.city_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4, 5)

SELECT TO_CHAR(DATE_TRUNC('year', first_orders_category_derived.min_creation_time_local),
               'YYYY')                                   AS "first_orders_category_derived.first_order_local_year",
       CAST(DATEDIFF('YEAR', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_years_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  --AND first_orders_category_derived.country_code NOT IN('BR','CL','EG','PR','TR','UY')
  AND first_orders_category_derived.city_code IN ('LIM')
  --AND orders.creation_time_local < '2020-03-01'
  AND (CAST(DATEDIFF('YEAR', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) > -1)
GROUP BY 1, 2
ORDER BY 1, 2;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time_local) AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

    /* last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1),*/

     second_and_third_orders AS (SELECT customer_id,
                                        MIN(CASE WHEN order_ranking = 1 THEN creation_time_local ELSE NULL END) AS first_order_time,
                                        MIN(CASE WHEN order_ranking = 2 THEN creation_time_local ELSE NULL END) AS second_order_time,
                                        MIN(CASE WHEN order_ranking = 3 THEN creation_time_local ELSE NULL END) AS third_order_time,
                                        DATEDIFF('month', first_order_time, second_order_time)                  AS second_order_cohorts_month_since_first_order,
                                        DATEDIFF('month', first_order_time, third_order_time)                   AS third_order_cohorts_month_since_first_order


                                 FROM (
                                          SELECT customer_id,
                                                 id,
                                                 creation_time_local,
                                                 RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking
                                          FROM orders
                                          WHERE final_status = 'DeliveredStatus') AS orders_ranked
                                 WHERE order_ranking IN (1, 2, 3)
                                 GROUP BY 1
     )

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value",
    /*COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month",*/
       COUNT(DISTINCT CASE
                          WHEN second_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_2nd_orders_delivered,
       COUNT(DISTINCT CASE
                          WHEN third_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_3rd_orders_delivered
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
    -- INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
         INNER JOIN second_and_third_orders ON orders.customer_id = second_and_third_orders.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-04-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time_local) AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name LIKE '%Organic%' OR
                                                               network_name LIKE '%Homepage%' OR network_name = '' OR
                                                               network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (network_name NOT LIKE '%Organic%' AND
                                                               network_name NOT LIKE '%Homepage%' AND
                                                               network_name <> '' AND network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Web Organic'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND (promotions.type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Web Paid'
                                                      WHEN promotions.type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel

                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    JOIN users ON orders.customer_id = users.id


                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND is_marketplace = false
                                             --  AND users.deleted = 0
                                             AND orders.deleted = 0
                                           --AND (country_code = 'ES')
                                       ) as Channel on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time_local) AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END        AS "payment_method"
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.payment_method,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.payment_method IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.creation_time_local)        AS "min_creation_time_local",
                                              MIN(orders.creation_time)              AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '6. Free Order'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.3 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '5. <30% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.3 AND
                                                       orders.first_order = TRUE THEN '4. 30% - 50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.7 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.5 AND
                                                       orders.first_order = TRUE THEN '3. 50% - 70% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.7 AND
                                                       orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 17, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.promotion IS NOT NULL
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH complete_orders_table AS (
    SELECT *,
           RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking,
           FLOOR((datediff('DAY', first_delivered_order_time, creation_time_local)) * 1.00 /
                 28)                                                           AS cohort_rolling_months_since_first_order,
           current_date                                                        AS update_date,
           FLOOR((datediff('DAY', first_delivered_order_time, update_date)) * 1.00 /
                 28)                                                           AS update_date_rolling_months_since_first_order

    FROM (
             SELECT customer_id,
                    id,
                    first_order,
                    creation_time_local,
                    country_code,
                    MIN(CASE WHEN first_order = TRUE THEN creation_time_local ELSE NULL END)
                    OVER (PARTITION BY customer_id) AS first_delivered_order_time,
                    CASE
                        WHEN creation_time_local >= first_delivered_order_time THEN TRUE
                        ELSE FALSE END              AS delivered_after_first_order
             FROM orders
             WHERE 1 = 1
               AND final_status = 'DeliveredStatus'
             ORDER BY 1, 2) st1

    WHERE delivered_after_first_order = TRUE
),

     first_order_specific AS (
         SELECT customer_id, country_code
         FROM complete_orders_table
         WHERE first_order
     )


SELECT first_order_specific.country_code,
       TO_CHAR(DATE_TRUNC('month', first_delivered_order_time)
           , 'YYYY-MM')                                                  AS first_order_local_month,
       cohort_rolling_months_since_first_order,
       update_date_rolling_months_since_first_order,
       CASE
           WHEN (RANK()
                 OVER (PARTITION BY first_order_specific.country_code, first_order_local_month, cohort_rolling_months_since_first_order ORDER BY update_date_rolling_months_since_first_order)) =
                2 THEN TRUE
           ELSE FALSE END                                                AS first_cohort_part,
       CASE
           WHEN update_date_rolling_months_since_first_order > cohort_rolling_months_since_first_order THEN TRUE
           ELSE FALSE END                                                AS cohort_month_completed,
    /*CASE WHEN update_date_rolling_months_since_first_order =
    MAX(update_date_rolling_months_since_first_order) OVER (PARTITION BY country_code,first_order_local_month,cohort_rolling_months_since_first_order),*/
       COUNT(DISTINCT complete_orders_table.customer_id)                 AS number_of_active_users,
       COUNT(DISTINCT id)                                                AS number_of_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 2 THEN id ELSE NULL END) AS total_2nd_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 3 THEN id ELSE NULL END) AS total_3rd_orders

FROM complete_orders_table
         INNER JOIN first_order_specific ON first_order_specific.customer_id = complete_orders_table.customer_id
WHERE 1 = 1
  AND cohort_rolling_months_since_first_order BETWEEN 0 AND 16
  AND first_order_local_month > dateadd('month', -16, update_date)
  AND update_date_rolling_months_since_first_order >= 0
  AND complete_orders_table.country_code NOT IN ('BR', 'CL')
  --AND cohort_rolling_months_since_first_order = 0
  --AND first_order_local_month = '2019-10'
  --AND first_order_specific.country_code = 'ES'

GROUP BY 1, 2, 3, 4
ORDER BY 1, 2, 3, 4;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

    /* last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1),*/

     second_and_third_orders AS (SELECT customer_id,
                                        MIN(CASE WHEN order_ranking = 1 THEN creation_time_local ELSE NULL END) AS first_order_time,
                                        MIN(CASE WHEN order_ranking = 2 THEN creation_time_local ELSE NULL END) AS second_order_time,
                                        MIN(CASE WHEN order_ranking = 3 THEN creation_time_local ELSE NULL END) AS third_order_time,
                                        DATEDIFF('month', first_order_time, second_order_time)                  AS second_order_cohorts_month_since_first_order,
                                        DATEDIFF('month', first_order_time, third_order_time)                   AS third_order_cohorts_month_since_first_order


                                 FROM (
                                          SELECT customer_id,
                                                 id,
                                                 creation_time_local,
                                                 RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking
                                          FROM orders
                                          WHERE final_status = 'DeliveredStatus') AS orders_ranked
                                 WHERE order_ranking IN (1, 2, 3)
                                 GROUP BY 1
     )

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value",
    /*COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month",*/
       COUNT(DISTINCT CASE
                          WHEN second_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_2nd_orders_delivered,
       COUNT(DISTINCT CASE
                          WHEN third_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_3rd_orders_delivered
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
    -- INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
         INNER JOIN second_and_third_orders ON orders.customer_id = second_and_third_orders.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-07-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((first_orders_category_derived.min_creation_time_local) >=
       ((DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
       (first_orders_category_derived.min_creation_time_local) <
       ((DATEADD(month, 20, DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH first_devices_derived AS (
    SELECT DISTINCT devices.device_id, devices.user_id, min_creation_time
    FROM (SELECT user_id, min(creation_time) as min_creation_time
          FROM devices
          GROUP BY 1) as first_device
             LEFT JOIN devices ON devices.user_id = first_device.user_id
        AND first_device.min_creation_time = devices.creation_time),

     mgm_orders AS (SELECT DISTINCT orders.id       AS order_id,
                                    promotions.type AS promotion_type
                    FROM orders
                             LEFT JOIN order_pricing_applied_discounts
                                       ON order_pricing_applied_discounts.order_id = orders.id
                             LEFT JOIN promocode_uses
                                       ON order_pricing_applied_discounts.promocode_use_id = promocode_uses.id
                             LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                             LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                    WHERE promotions.type = 'MGM'),

     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name LIKE '%Organic%' OR
                                                               adj.network_name LIKE '%Homepage%' OR
                                                               adj.network_name = '' OR
                                                               adj.network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name NOT LIKE '%Organic%' AND
                                                               adj.network_name NOT LIKE '%Homepage%' AND
                                                               adj.network_name <> '' AND adj.network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Organic web'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Paid web'
                                                      WHEN mgm_orders.promotion_type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel
                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN mgm_orders ON orders.id = mgm_orders.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    LEFT JOIN first_devices_derived
                                                              ON orders.customer_id = first_devices_derived.user_id
                                                    LEFT JOIN ext_adjust_installs AS adj
                                                              ON adj.device_id = first_devices_derived.device_id
                                                    JOIN users ON orders.customer_id = users.id
                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND orders.is_marketplace = false
                                             AND orders.deleted = 0) as Channel
                                                          on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
--AND first_orders_category_derived.channel IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END        AS "payment_method"
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.payment_method,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.payment_method IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.creation_time_local)        AS "min_creation_time_local",
                                              MIN(orders.creation_time)              AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '6. Free Order'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.3 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '5. <30% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.3 AND
                                                       orders.first_order = TRUE THEN '4. 30% - 50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge) * 0.7 AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.5 AND
                                                       orders.first_order = TRUE THEN '3. 50% - 70% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) AND
                                                       orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge) * 0.7 AND
                                                       orders.first_order = TRUE THEN '2. >70% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 17, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.promotion IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH complete_orders_table AS (
    SELECT *,
           RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking,
           FLOOR((datediff('DAY', first_delivered_order_time, creation_time_local)) * 1.00 /
                 14)                                                           AS cohort_rolling_months_since_first_order,
           current_date                                                        AS update_date,
           FLOOR((datediff('DAY', first_delivered_order_time, update_date)) * 1.00 /
                 14)                                                           AS update_date_rolling_months_since_first_order

    FROM (
             SELECT customer_id,
                    id,
                    first_order,
                    creation_time_local,
                    country_code,
                    MIN(CASE WHEN first_order = TRUE THEN creation_time_local ELSE NULL END)
                    OVER (PARTITION BY customer_id) AS first_delivered_order_time,
                    CASE
                        WHEN creation_time_local >= first_delivered_order_time THEN TRUE
                        ELSE FALSE END              AS delivered_after_first_order
             FROM orders
             WHERE 1 = 1
               AND final_status = 'DeliveredStatus'
             ORDER BY 1, 2) st1

    WHERE delivered_after_first_order = TRUE
),

     first_order_specific AS (
         SELECT customer_id, country_code
         FROM complete_orders_table
         WHERE first_order
     )


SELECT first_order_specific.country_code,
       TO_CHAR(DATE_TRUNC('month', first_delivered_order_time)
           , 'YYYY-MM')                                                  AS first_order_local_month,
       cohort_rolling_months_since_first_order,
       update_date_rolling_months_since_first_order,
       CASE
           WHEN (RANK()
                 OVER (PARTITION BY first_order_specific.country_code, first_order_local_month, cohort_rolling_months_since_first_order ORDER BY update_date_rolling_months_since_first_order)) =
                2 THEN TRUE
           ELSE FALSE END                                                AS first_cohort_part,
       CASE
           WHEN update_date_rolling_months_since_first_order > cohort_rolling_months_since_first_order THEN TRUE
           ELSE FALSE END                                                AS cohort_month_completed,
    /*CASE WHEN update_date_rolling_months_since_first_order =
    MAX(update_date_rolling_months_since_first_order) OVER (PARTITION BY country_code,first_order_local_month,cohort_rolling_months_since_first_order),*/
       COUNT(DISTINCT complete_orders_table.customer_id)                 AS number_of_active_users,
       COUNT(DISTINCT id)                                                AS number_of_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 2 THEN id ELSE NULL END) AS total_2nd_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 3 THEN id ELSE NULL END) AS total_3rd_orders

FROM complete_orders_table
         INNER JOIN first_order_specific ON first_order_specific.customer_id = complete_orders_table.customer_id
WHERE 1 = 1
  AND cohort_rolling_months_since_first_order BETWEEN 0 AND 16
  AND first_order_local_month > dateadd('month', -16, update_date)
  AND update_date_rolling_months_since_first_order >= 0
  AND complete_orders_table.country_code NOT IN ('BR', 'CL')
  --AND cohort_rolling_months_since_first_order = 0
  --AND first_order_local_month = '2019-10'
  --AND first_order_specific.country_code = 'ES'

GROUP BY 1, 2, 3, 4
ORDER BY 1, 2, 3, 4;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN coalesce(tagged_stores.entity_tags, 'n') ilike '%Groceries%'
                                                      THEN 'Groceries'
                                                  WHEN (mcd_partner = TRUE OR
                                                        (orders.is_food AND vertical NOT IN ('COURIER', 'QUIERO')))
                                                      THEN 'Food'
                                                  ELSE 'Other' END            AS order_vertical
                                       FROM public.orders
                                                LEFT JOIN store_addresses ON orders.store_address_id = store_addresses.id
                                                LEFT JOIN tagged_stores ON store_addresses.store_id = tagged_stores.store_id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.order_vertical,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.order_vertical IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;


WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN is_marketplace = TRUE THEN 'GEN1'
                                                  ELSE 'GEN2' END             AS marketplace
                                       FROM public.orders
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND public.orders.first_order
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.marketplace,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.marketplace IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4
                                       HAVING min_creation_time_local > '2020-03-01 00:00:00.000000')

SELECT COUNT(DISTINCT id) AS total_new_customers,
       COUNT(birthday)    AS with_gender,
       --COUNT(CASE WHEN facebook_signup = 1 THEN 1 ELSE NULL END) AS facebook_users,
       with_gender / total_new_customers * 1.00
FROM private_customer.customer_birthdays u
         JOIN first_orders_category_derived focd ON u.id = focd.customer_id

SELECT *
FROM population_enriched_data
ORDER BY random()
LIMIT 10;

SELECT *
FROM private_customer.customer_genders
WHERE gender IS NOT NULL
ORDER BY random()
LIMIT 10;

SELECT COUNT(DISTINCT id) AS customers,
       COUNT(gender)      AS with_data,
       1.00 * with_data / customers
FROM private_customer.customer_genders

SELECT COUNT(DISTINCT id) AS customers,
       COUNT(birthday)    AS with_data,
       1.00 * with_data / customers
FROM private_customer.customer_birthdays;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4
                                       HAVING min_creation_time_local > '2020-03-01 00:00:00.000000'
                                          AND min_creation_time_local < '2020-06-01 00:00:00.000000')

SELECT focd.country_code,
       COUNT(DISTINCT id),
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 20 THEN id
                          ELSE NULL END) AS under_20,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 19
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 25 THEN id
                          ELSE NULL END) AS from_20_to_25,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 24
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 30 THEN id
                          ELSE NULL END) AS from_25_to_30,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 29
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 35 THEN id
                          ELSE NULL END) AS from_30_to_35,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 34
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 40 THEN id
                          ELSE NULL END) AS from_35_to_40,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 39 THEN id
                          ELSE NULL END) AS over_40
FROM private_customer.customer_birthdays cu
         JOIN first_orders_category_derived focd ON cu.id = focd.customer_id
GROUP BY 1;


WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4
                                       HAVING min_creation_time_local > '2020-03-01 00:00:00.000000'
                                           v),

     recurrent_customers AS (SELECT customer_id,
                                    country_code
                             FROM orders
                             WHERE customer_id NOT IN (SELECT customer_id FROM first_orders_category_derived)
                               AND creation_time_local > '2020-03-01 00:00:00.000000'
                               AND creation_time_local < '2020-06-01 00:00:00.000000'
                               AND final_status = 'DeliveredStatus'
                             GROUP BY 1, 2)


SELECT rc.country_code,
       COUNT(DISTINCT id),
       COUNT(DISTINCT CASE
                          WHEN gender = 'female' THEN id
                          ELSE NULL END) AS q_females,
       COUNT(DISTINCT CASE
                          WHEN gender = 'male' THEN id
                          ELSE NULL END) AS q_males
FROM private_customer.customer_genders cu
         JOIN recurrent_customers rc ON cu.id = rc.customer_id
GROUP BY 1;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4
                                       HAVING min_creation_time_local > '2020-03-01 00:00:00.000000'
                                          AND min_creation_time_local < '2020-06-01 00:00:00.000000')

SELECT focd.country_code,
       COUNT(DISTINCT id),
       COUNT(DISTINCT CASE
                          WHEN gender = 'female' THEN id
                          ELSE NULL END) AS q_females,
       COUNT(DISTINCT CASE
                          WHEN gender = 'male' THEN id
                          ELSE NULL END) AS q_males
FROM private_customer.customer_genders cu
         JOIN first_orders_category_derived focd ON cu.id = focd.customer_id
GROUP BY 1;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4
                                       HAVING min_creation_time_local > '2020-03-01 00:00:00.000000'
                                          AND min_creation_time_local < '2020-06-01 00:00:00.000000'),

     recurrent_customers AS (SELECT customer_id,
                                    country_code
                             FROM orders
                             WHERE customer_id NOT IN (SELECT customer_id FROM first_orders_category_derived)
                               AND creation_time_local > '2020-03-01 00:00:00.000000'
                               AND creation_time_local < '2020-06-01 00:00:00.000000'
                               AND final_status = 'DeliveredStatus'
                             GROUP BY 1, 2)


SELECT rc.country_code,
       COUNT(DISTINCT id),
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 20 THEN id
                          ELSE NULL END) AS under_20,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 19
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 25 THEN id
                          ELSE NULL END) AS from_20_to_25,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 24
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 30 THEN id
                          ELSE NULL END) AS from_25_to_30,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 29
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 35 THEN id
                          ELSE NULL END) AS from_30_to_35,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 34
                              AND CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 < 40 THEN id
                          ELSE NULL END) AS from_35_to_40,
       COUNT(DISTINCT CASE
                          WHEN CAST(DATEDIFF('DAY', birthday, current_date) AS INT) / 365 > 39 THEN id
                          ELSE NULL END) AS over_40
FROM private_customer.customer_birthdays cu
         JOIN recurrent_customers rc ON cu.id = rc.customer_id
GROUP BY 1;

WITH non_food_users AS (SELECT customer_id,
                               CASE
                                   WHEN coalesce(tagged_stores.entity_tags, 'n') ilike '%Groceries%' THEN 'Groceries'
                                   WHEN (mcd_partner = TRUE OR
                                         (orders.is_food AND vertical NOT IN ('COURIER', 'QUIERO'))) THEN 'Food'
                                   ELSE 'Other' END AS order_vertical
                        FROM public.orders
                                 LEFT JOIN store_addresses ON orders.store_address_id = store_addresses.id
                                 LEFT JOIN tagged_stores ON store_addresses.store_id = tagged_stores.store_id

                        WHERE public.orders.final_status = 'DeliveredStatus'
                          AND creation_time_local < '2020-06-01'
                          AND order_vertical <> 'Food'),

     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-06-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND orders.customer_id NOT IN (SELECT customer_id FROM non_food_users)
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH last_orders_category_derived
         AS (SELECT COUNT(DISTINCT CASE WHEN is_marketplace THEN customer_id ELSE NULL END) AS total_GEN1_churned,
                    COUNT(DISTINCT
                          CASE WHEN is_marketplace = FALSE THEN customer_id ELSE NULL END)  AS total_GEN2_churned,
                    TO_CHAR(DATE_TRUNC('month', creation_time_local), 'YYYY-MM')            AS date,
                    country_code
             FROM (SELECT id,
                          customer_id,
                          creation_time_local,
                          country_code,
                          is_marketplace,
                          LEAD(id) OVER (PARTITION BY customer_id ORDER BY creation_time_local ASC) AS next_order

                   FROM orders

                   WHERE orders.final_status = 'DeliveredStatus'
                     AND country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
                   GROUP BY 1, 2, 3, 4, 5) st1
             WHERE next_order IS NULL
               AND creation_time_local < '2020-06-01'
               AND creation_time_local > '2018-12-31'
             GROUP BY 3, 4),

     total_orders_table AS (SELECT COUNT(DISTINCT CASE WHEN is_marketplace THEN id ELSE NULL END)         AS total_GEN1_orders,
                                   COUNT(DISTINCT CASE WHEN is_marketplace = FALSE THEN id ELSE NULL END) AS total_GEN2_orders,
                                   country_code,
                                   TO_CHAR(DATE_TRUNC('month', creation_time_local), 'YYYY-MM')           AS date
                            FROM orders
                            WHERE orders.final_status = 'DeliveredStatus'
                              AND country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
                              AND creation_time_local < '2020-06-01'
                              AND creation_time_local > '2018-12-31'
                            GROUP BY 3, 4)

SELECT locd.country_code,
       locd.date,
       locd.total_GEN1_churned,
       locd.total_GEN2_churned,
       tot.total_GEN1_orders,
       tot.total_GEN2_orders
FROM last_orders_category_derived locd
         RIGHT JOIN total_orders_table tot ON locd.country_code = tot.country_code
    AND locd.date = tot.date
WHERE locd.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
ORDER BY 1, 2

WITH last_orders_category_derived
         AS (SELECT COUNT(DISTINCT CASE WHEN is_marketplace THEN customer_id ELSE NULL END) AS total_GEN1_churned,
                    COUNT(DISTINCT
                          CASE WHEN is_marketplace = FALSE THEN customer_id ELSE NULL END)  AS total_GEN2_churned,
                    TO_CHAR(DATE_TRUNC('month', creation_time_local), 'YYYY-MM')            AS date,
                    country_code
             FROM (SELECT id,
                          customer_id,
                          creation_time_local,
                          country_code,
                          is_marketplace,
                          LEAD(id) OVER (PARTITION BY customer_id ORDER BY creation_time_local ASC) AS next_order

                   FROM orders

                   WHERE orders.final_status = 'DeliveredStatus'
                     AND country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
                   GROUP BY 1, 2, 3, 4, 5) st1
             WHERE next_order IS NULL
               AND creation_time_local < '2020-06-01'
               AND creation_time_local > '2018-12-31'
             GROUP BY 3, 4),

     total_customers_table
         AS (SELECT COUNT(DISTINCT CASE WHEN is_marketplace THEN customer_id ELSE NULL END) AS total_GEN1_customers,
                    COUNT(DISTINCT customer_id) - total_GEN1_customers                      AS total_GEN2_customers,
                    country_code,
                    TO_CHAR(DATE_TRUNC('month', creation_time_local), 'YYYY-MM')            AS date
             FROM orders
             WHERE orders.final_status = 'DeliveredStatus'
               AND country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
               AND creation_time_local < '2020-06-01'
               AND creation_time_local > '2018-12-31'
             GROUP BY 3, 4)

SELECT locd.country_code,
       locd.date,
       locd.total_GEN1_churned,
       locd.total_GEN2_churned,
       tot.total_GEN1_customers,
       tot.total_GEN2_customers
FROM last_orders_category_derived locd
         RIGHT JOIN total_customers_table tot ON locd.country_code = tot.country_code
    AND locd.date = tot.date
WHERE locd.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
ORDER BY 1, 2

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.is_marketplace

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                         AND country_code IN
                                             ('AR', 'EC', 'ES', 'GE', 'GT', 'HR', 'IT', 'KE', 'KZ', 'MA', 'PE', 'PL',
                                              'PT', 'RO', 'RS', 'UA')
                                       GROUP BY 1, 4)

SELECT first_orders_category_derived.is_marketplace      AS "GEN",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  --AND first_orders_category_derived.country_code NOT IN('BR','CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-06-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

SELECT country_code,
       COUNT(DISTINCT CASE WHEN is_marketplace THEN id ELSE NULL END)         AS GEN1,
       COUNT(DISTINCT CASE WHEN is_marketplace = FALSE THEN id ELSE NULL END) AS GEN2,
       1.00 * GEN1 / (GEN2 + GEN1)
FROM orders
WHERE creation_time_local < '2020-06-01'
  AND creation_time_local > '2020-04-30'
  AND final_status = 'DeliveredStatus'
GROUP BY 1;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((first_orders_category_derived.min_creation_time_local) >=
       ((DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
       (first_orders_category_derived.min_creation_time_local) <
       ((DATEADD(month, 20, DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH raw_data AS (WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                                                MIN(orders.creation_time_local) AS "min_creation_time_local",
                                                                MIN(orders.creation_time)       AS "min_creation_time",
                                                                orders.city_code,
                                                                orders.country_code,
                                                                CASE
                                                                    WHEN is_marketplace = TRUE THEN 'GEN1'
                                                                    ELSE 'GEN2' END             AS marketplace
                                                         FROM public.orders
                                                         WHERE public.orders.final_status = 'DeliveredStatus'
                                                           AND public.orders.first_order
                                                         GROUP BY 1, 4, 5, 6)

                  SELECT first_orders_category_derived.country_code        AS "country_code",
                         first_orders_category_derived.city_code           AS "city_code",
                         TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
                                 'YYYY-MM')                                AS "FO_month",
                         CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                                       orders.creation_time_local) AS INT) AS "Months_since_FO",
                         first_orders_category_derived.marketplace         AS GEN,
                         COUNT(DISTINCT orders.customer_id)                AS "Active_users"
                  FROM public.orders AS orders
                           LEFT JOIN public.users AS users ON orders.customer_id = users.id
                           INNER JOIN first_orders_category_derived
                                      ON orders.customer_id = first_orders_category_derived.customer_id
                  WHERE (orders.final_status = 'DeliveredStatus')
                    AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                                        orders.creation_time_local) AS INT) IN
                          (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
                    AND ((((first_orders_category_derived.min_creation_time_local) >=
                           ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
                           (first_orders_category_derived.min_creation_time_local) < ((DATEADD(month, 16,
                                                                                               DATEADD(month, -15,
                                                                                                       DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
                    AND first_orders_category_derived.marketplace IS NOT NULL
                    AND first_orders_category_derived.country_code = 'ES'
                  GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
                  ORDER BY 1, 2, 3, 4, 5)

SELECT city_code,
       FO_month,
       SUM(CASE WHEN Months_since_FO = 0 AND GEN = 'GEN1' THEN Active_users ELSE NULL END) AS GEN1_M0_AU,
       SUM(CASE WHEN Months_since_FO = 1 AND GEN = 'GEN1' THEN Active_users ELSE NULL END) AS GEN1_M1_AU,
       SUM(CASE WHEN Months_since_FO = 0 AND GEN = 'GEN2' THEN Active_users ELSE NULL END) AS GEN2_M0_AU,
       SUM(CASE WHEN Months_since_FO = 1 AND GEN = 'GEN2' THEN Active_users ELSE NULL END) AS GEN2_M1_AU
FROM raw_data
WHERE FO_month = '2019-06'
GROUP BY 1, 2
HAVING GEN1_M0_AU > 0
ORDER BY 1, 2;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     sessions_table AS (SELECT customer_id,
                               creation_time
                        FROM log_mp_session_start
                        WHERE customer_id IN (SELECT customer_id FROM first_orders_category_derived))

SELECT first_orders_category_derived.country_code  AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                          AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     st.creation_time) AS INT)     AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT CASE
                          WHEN "users.cohort_months_since_first_order_after_condition" = 0
                              THEN first_orders_category_derived.customer_id
                          ELSE st.customer_id END) AS "orders.number_of_active_users"
FROM first_orders_category_derived
         LEFT JOIN sessions_table ST ON first_orders_category_derived.customer_id = st.customer_id
WHERE first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND st.creation_time < '2020-07-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      st.creation_time) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((first_orders_category_derived.min_creation_time_local) >=
       ((DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
       (first_orders_category_derived.min_creation_time_local) <
       ((DATEADD(month, 20, DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

--Deep dive PMF
WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     sessions_table AS (SELECT lmss.customer_id,
                               creation_time
                        FROM log_mp_session_start lmss
                                 JOIN first_orders_category_derived focd
                                      ON lmss.customer_id = focd.customer_id
                        WHERE min_creation_time_local BETWEEN '2020-03-01 00:00:00.000000' AND '2020-04-01 00:00:00.000000'
                          AND creation_time BETWEEN '2020-04-01 00:00:00.000000' AND '2020-05-01 00:00:00.000000'),

     orders_table AS (SELECT o.customer_id
                      FROM orders o
                               JOIN first_orders_category_derived focd
                                    ON o.customer_id = focd.customer_id
                      WHERE final_status = 'DeliveredStatus'
                        AND creation_time_local BETWEEN '2020-04-01 00:00:00.000000' AND '2020-05-01 00:00:00.000000'
                        AND min_creation_time_local BETWEEN '2020-03-01 00:00:00.000000' AND '2020-04-01 00:00:00.000000')

SELECT COUNT(DISTINCT customer_id)
FROM log_mp_screen_view_home
WHERE creation_time BETWEEN '2020-04-01 00:00:00.000000' AND '2020-05-01 00:00:00.000000'
  AND customer_id IN (SELECT customer_id FROM sessions_table)
  AND customer_id NOT IN (SELECT customer_id FROM orders_table);

--Deep dive PMF v.2
WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     orders_table AS (SELECT o.customer_id
                      FROM orders o
                               JOIN first_orders_category_derived focd
                                    ON o.customer_id = focd.customer_id
                      WHERE final_status = 'DeliveredStatus'
                        AND creation_time_local BETWEEN '2020-04-01 00:00:00.000000' AND '2020-05-01 00:00:00.000000'
                        AND min_creation_time_local BETWEEN '2020-03-01 00:00:00.000000' AND '2020-04-01 00:00:00.000000')

SELECT COUNT(DISTINCT lmp.customer_id) AS customers_wo_orders
FROM log_mp_checkout_started lmp
         JOIN first_orders_category_derived focd
              ON lmp.customer_id = focd.customer_id
WHERE creation_time BETWEEN '2020-04-01 00:00:00.000000' AND '2020-05-01 00:00:00.000000'
  AND min_creation_time_local BETWEEN '2020-03-01 00:00:00.000000' AND '2020-04-01 00:00:00.000000'
  AND lmp.customer_id NOT IN (SELECT customer_id FROM orders_table);

--Master Cohorts
WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

    /* last_orders_category_derived AS (SELECT orders.customer_id                AS "customer_id",
                                             MAX(orders.activation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1),*/

     second_and_third_orders AS (SELECT customer_id,
                                        MIN(CASE WHEN order_ranking = 1 THEN creation_time_local ELSE NULL END) AS first_order_time,
                                        MIN(CASE WHEN order_ranking = 2 THEN creation_time_local ELSE NULL END) AS second_order_time,
                                        MIN(CASE WHEN order_ranking = 3 THEN creation_time_local ELSE NULL END) AS third_order_time,
                                        DATEDIFF('month', first_order_time, second_order_time)                  AS second_order_cohorts_month_since_first_order,
                                        DATEDIFF('month', first_order_time, third_order_time)                   AS third_order_cohorts_month_since_first_order


                                 FROM (
                                          SELECT customer_id,
                                                 id,
                                                 creation_time_local,
                                                 RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking
                                          FROM orders
                                          WHERE final_status = 'DeliveredStatus') AS orders_ranked
                                 WHERE order_ranking IN (1, 2, 3)
                                 GROUP BY 1
     )

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value",
    /*COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.activation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month",*/
       COUNT(DISTINCT CASE
                          WHEN second_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_2nd_orders_delivered,
       COUNT(DISTINCT CASE
                          WHEN third_order_cohorts_month_since_first_order =
                               "users.cohort_months_since_first_order_after_condition" THEN orders.customer_id
                          ELSE NULL END)                 AS total_3rd_orders_delivered
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
    -- INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
         INNER JOIN second_and_third_orders ON orders.customer_id = second_and_third_orders.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2021-02-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((first_orders_category_derived.min_creation_time_local) >=
       ((DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
       (first_orders_category_derived.min_creation_time_local) <
       ((DATEADD(month, 20, DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

WITH first_devices_derived AS (
    SELECT DISTINCT devices.device_id, devices.user_id, min_creation_time
    FROM (SELECT user_id, min(creation_time) as min_creation_time
          FROM devices
          GROUP BY 1) as first_device
             LEFT JOIN devices ON devices.user_id = first_device.user_id
        AND first_device.min_creation_time = devices.creation_time),

     mgm_orders AS (SELECT DISTINCT orders.id       AS order_id,
                                    promotions.type AS promotion_type
                    FROM orders
                             LEFT JOIN order_pricing_applied_discounts
                                       ON order_pricing_applied_discounts.order_id = orders.id
                             LEFT JOIN promocode_uses
                                       ON order_pricing_applied_discounts.promocode_use_id = promocode_uses.id
                             LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                             LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                    WHERE promotions.type = 'MGM'),

     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name LIKE '%Organic%' OR
                                                               adj.network_name LIKE '%Homepage%' OR
                                                               adj.network_name = '' OR
                                                               adj.network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name NOT LIKE '%Organic%' AND
                                                               adj.network_name NOT LIKE '%Homepage%' AND
                                                               adj.network_name <> '' AND adj.network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Organic web'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Paid web'
                                                      WHEN mgm_orders.promotion_type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel
                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN mgm_orders ON orders.id = mgm_orders.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    LEFT JOIN first_devices_derived
                                                              ON orders.customer_id = first_devices_derived.user_id
                                                    LEFT JOIN ext_adjust_installs AS adj
                                                              ON adj.device_id = first_devices_derived.device_id
                                                    JOIN users ON orders.customer_id = users.id
                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND orders.deleted = 0) as Channel
                                                          on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
--AND first_orders_category_derived.channel IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY', 'AR', 'DO', 'PA')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN payment_method = 'CASH' AND orders.first_order = TRUE THEN 'CASH'
                                                  WHEN payment_method = 'CREDIT_CARD' AND orders.first_order = TRUE
                                                      THEN 'CREDIT_CARD'
                                                  WHEN (payment_method NOT IN ('CREDIT_CARD', 'CASH') OR payment_method IS NULL) AND
                                                       orders.first_order = TRUE
                                                      THEN 'Other' END        AS "payment_method"
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.payment_method,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.payment_method IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY', 'AR', 'DO', 'PA')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

WITH first_orders_category_derived AS (SELECT orders.customer_id                     AS "customer_id",
                                              MIN(orders.creation_time_local)        AS "min_creation_time_local",
                                              MIN(orders.creation_time)              AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              CASE
                                                  WHEN orders.gtv <= 0 AND orders.first_order = TRUE
                                                      THEN '4. Free Order'
                                                  WHEN orders.free_delivery AND
                                                       orders.gtv <= (orders.total_purchase + orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '3. <=50% of Full Price Paid'
                                                  WHEN orders.gtv <= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge +
                                                                      orders.effective_weather_surcharge) * 0.5 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '3. <=50% of Full Price Paid'
                                                  WHEN orders.free_delivery AND
                                                       orders.gtv > (orders.total_purchase + orders.basket_surcharge) * 0.5 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '2. >50% of Full Price Paid'
                                                  WHEN orders.gtv < (orders.total_purchase + orders.delivery_fee +
                                                                     orders.service_fee +
                                                                     orders.basket_surcharge +
                                                                     orders.effective_weather_surcharge)
                                                      AND orders.gtv > (orders.total_purchase + orders.delivery_fee +
                                                                        orders.service_fee +
                                                                        orders.basket_surcharge +
                                                                        orders.effective_weather_surcharge) * 0.5 AND
                                                       orders.gtv > 0 AND orders.first_order = TRUE
                                                      THEN '2. >50% of Full Price Paid'
                                                  WHEN orders.gtv >= (orders.total_purchase + orders.delivery_fee +
                                                                      orders.service_fee +
                                                                      orders.basket_surcharge +
                                                                      orders.effective_weather_surcharge)
                                                      AND orders.first_order = TRUE
                                                      THEN '1. Order Fully Paid' END AS promotion
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6),

     last_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                             MAX(orders.creation_time_local) AS "max_creation_time"
                                      FROM public.orders
                                      WHERE /*orders.activation_time_local < '2019-10-01 00:00:00.000000'
            AND*/ orders.final_status = 'DeliveredStatus'
                                      GROUP BY 1)

SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       first_orders_category_derived.city_code                                           AS "orders.city_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       --Channel,
       first_orders_category_derived.promotion,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur",
       COUNT(DISTINCT CASE
                          WHEN TO_CHAR(DATE_TRUNC('month', last_orders_category_derived.max_creation_time),
                                       'YYYY-MM') = TO_CHAR(DATE_TRUNC('month', orders.creation_time_local),
                                                            'YYYY-MM') THEN orders.customer_id
                          ELSE NULL END)                                                 AS "last_orders_category_derived.last_order_local_month"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
         INNER JOIN last_orders_category_derived ON orders.customer_id = last_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 17, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.promotion IS NOT NULL
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY', 'AR', 'PA', 'DO')
GROUP BY 1, 2, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 4, 5
ORDER BY 1, 2, 3, 4, 5;

--2nd & 3rd orders cohorts
WITH complete_orders_table AS (
    SELECT *,
           RANK() OVER (PARTITION BY customer_id ORDER BY creation_time_local) AS order_ranking,
           FLOOR((datediff('DAY', first_delivered_order_time, creation_time_local)) * 1.00 /
                 14)                                                           AS cohort_rolling_months_since_first_order,
           current_date                                                        AS update_date,
           FLOOR((datediff('DAY', first_delivered_order_time, update_date)) * 1.00 /
                 14)                                                           AS update_date_rolling_months_since_first_order

    FROM (
             SELECT customer_id,
                    id,
                    first_order,
                    creation_time_local,
                    country_code,
                    MIN(CASE WHEN first_order = TRUE THEN creation_time_local ELSE NULL END)
                    OVER (PARTITION BY customer_id) AS first_delivered_order_time,
                    CASE
                        WHEN creation_time_local >= first_delivered_order_time THEN TRUE
                        ELSE FALSE END              AS delivered_after_first_order
             FROM orders
             WHERE 1 = 1
               AND final_status = 'DeliveredStatus'
             ORDER BY 1, 2) st1

    WHERE delivered_after_first_order = TRUE
),

     first_order_specific AS (
         SELECT customer_id, country_code
         FROM complete_orders_table
         WHERE first_order
     )


SELECT first_order_specific.country_code,
       TO_CHAR(DATE_TRUNC('month', first_delivered_order_time)
           , 'YYYY-MM')                                                  AS first_order_local_month,
       cohort_rolling_months_since_first_order,
       COUNT(DISTINCT complete_orders_table.customer_id)                 AS number_of_active_users,
       COUNT(DISTINCT id)                                                AS number_of_orders,
       'gmv',
       COUNT(DISTINCT CASE WHEN order_ranking = 2 THEN id ELSE NULL END) AS total_2nd_orders,
       COUNT(DISTINCT CASE WHEN order_ranking = 3 THEN id ELSE NULL END) AS total_3rd_orders

FROM complete_orders_table
         INNER JOIN first_order_specific ON first_order_specific.customer_id = complete_orders_table.customer_id
WHERE 1 = 1
  AND cohort_rolling_months_since_first_order BETWEEN 0 AND 16
  AND first_order_local_month > dateadd('month', -16, update_date)
  AND update_date_rolling_months_since_first_order >= 0
  AND complete_orders_table.country_code NOT IN ('BR', 'CL')
GROUP BY 1, 2, 3, 6
ORDER BY 1, 2, 3, 6;

SELECT TO_CHAR(DATE_TRUNC('month', creation_time_local), 'YYYY-MM') AS month,
       COUNT(DISTINCT customer_id)
FROM orders
WHERE final_status = 'DeliveredStatus'
  AND month = '2020-08'
GROUP BY 1

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)

SELECT TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users"
FROM public.orders AS orders
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2020-09-01'
GROUP BY 1, 2
ORDER BY 1, 2;

SELECT COUNT(DISTINCT id)
FROM orders
WHERE country_code = 'ES'
  AND final_status = 'DeliveredStatus'
  AND creation_time_local < '2020-10-01'
  AND creation_time_local > '2020-08-31';

WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code
                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)
SELECT TO_CHAR(DATE_TRUNC('year', first_orders_category_derived.min_creation_time_local),
               'YYYY')                                              AS "first_orders_category_derived.first_order_local_year",
       CAST(DATEDIFF('YEAR', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)            AS "users.cohort_years_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                           AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                            AS "orders.number_of_delivered_orders",
       COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                         THEN (1.0 * orders.total_purchase / orders.exchange_rate_currency)
                                                                     ELSE NULL END, 0) *
                                                        (1000000 * 1.0)) AS DECIMAL(38, 0))) +
                                            CAST(STRTOL(LEFT(MD5(CAST(CASE
                                                                          WHEN (orders.final_status = 'DeliveredStatus')
                                                                              THEN orders.id
                                                                          ELSE NULL END AS VARCHAR)), 15),
                                                        16) AS DECIMAL(38, 0)) * 1.0e8 +
                                            CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                           WHEN (orders.final_status = 'DeliveredStatus')
                                                                               THEN orders.id
                                                                           ELSE NULL END AS VARCHAR)), 15),
                                                        16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(LEFT(
                                                                                                                   MD5(
                                                                                                                           CAST(
                                                                                                                                   CASE
                                                                                                                                       WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                           THEN orders.id
                                                                                                                                       ELSE NULL END AS VARCHAR)),
                                                                                                                   15),
                                                                                                           16) AS DECIMAL(38, 0)) *
                                                                                               1.0e8 +
                                                                                               CAST(STRTOL(RIGHT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                           16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                         CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0),
                0)                                                  AS "orders.total_gmv_eur",
       SUM(1.00 * total_purchase / exchange_rate_currency),
       "orders.total_gmv_eur" / "orders.number_of_delivered_orders" AS AOV
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  --AND orders.creation_time_local < '2020-03-01'
  AND (CAST(DATEDIFF('YEAR', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) > -1)
GROUP BY 1, 2
ORDER BY 1, 2;

--New charts v1
WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4)

SELECT first_orders_category_derived.country_code,
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) *
       "orders.number_of_delivered_orders"               AS "orders.gross_merchandise_value"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND orders.creation_time_local < '2021-02-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 6)))
GROUP BY 1, 2, 3
ORDER BY 1, 2, 3;

WITH first_devices_derived AS (
    SELECT DISTINCT devices.device_id, devices.user_id, min_creation_time
    FROM (SELECT user_id, min(creation_time) as min_creation_time
          FROM devices
          GROUP BY 1) as first_device
             LEFT JOIN devices ON devices.user_id = first_device.user_id
        AND first_device.min_creation_time = devices.creation_time),
     mgm_orders AS (SELECT DISTINCT orders.id       AS order_id,
                                    promotions.type AS promotion_type
                    FROM orders
                             LEFT JOIN order_pricing_applied_discounts
                                       ON order_pricing_applied_discounts.order_id = orders.id
                             LEFT JOIN promocode_uses
                                       ON order_pricing_applied_discounts.promocode_use_id = promocode_uses.id
                             LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                             LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                    WHERE promotions.type = 'MGM'),
     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name LIKE '%Organic%' OR
                                                               adj.network_name LIKE '%Homepage%' OR
                                                               adj.network_name = '' OR
                                                               adj.network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name NOT LIKE '%Organic%' AND
                                                               adj.network_name NOT LIKE '%Homepage%' AND
                                                               adj.network_name <> '' AND adj.network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Organic web'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Paid web'
                                                      WHEN mgm_orders.promotion_type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel
                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN mgm_orders ON orders.id = mgm_orders.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    LEFT JOIN first_devices_derived
                                                              ON orders.customer_id = first_devices_derived.user_id
                                                    LEFT JOIN ext_adjust_installs AS adj
                                                              ON adj.device_id = first_devices_derived.device_id
                                                    JOIN users ON orders.customer_id = users.id
                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             --AND orders.is_marketplace = false
                                             AND orders.deleted = 0) as Channel
                                                          on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6)
SELECT first_orders_category_derived.country_code                                        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT)                                 AS "users.cohort_months_since_first_order_after_condition",
       Channel,
       COUNT(DISTINCT orders.customer_id)                                                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                                                 AS "orders.number_of_delivered_orders",
       (COALESCE(COALESCE(CAST((SUM(DISTINCT (CAST(FLOOR(COALESCE(CASE
                                                                      WHEN (orders.final_status = 'DeliveredStatus')
                                                                          THEN 1.0 * orders.total_purchase / orders.exchange_rate_currency
                                                                      ELSE NULL END, 0) *
                                                         (1000000 * 1.0)) AS DECIMAL(38, 0))) + CAST(STRTOL(LEFT(MD5(
                                                                                                                         CAST(
                                                                                                                                 CASE
                                                                                                                                     WHEN (orders.final_status = 'DeliveredStatus')
                                                                                                                                         THEN orders.id
                                                                                                                                     ELSE NULL END AS VARCHAR)),
                                                                                                                 15),
                                                                                                            16) AS DECIMAL(38, 0)) *
                                                                                                1.0e8 + CAST(STRTOL(
               RIGHT(MD5(CAST(CASE
                                  WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id
                                  ELSE NULL END AS VARCHAR)), 15), 16) AS DECIMAL(38, 0))) - SUM(DISTINCT CAST(STRTOL(
               LEFT(MD5(CAST(
                       CASE WHEN (orders.final_status = 'DeliveredStatus') THEN orders.id ELSE NULL END AS VARCHAR)),
                    15), 16) AS DECIMAL(38, 0)) * 1.0e8 + CAST(STRTOL(RIGHT(MD5(CAST(CASE
                                                                                         WHEN (orders.final_status = 'DeliveredStatus')
                                                                                             THEN orders.id
                                                                                         ELSE NULL END AS VARCHAR)),
                                                                            15),
                                                                      16) AS DECIMAL(38, 0)))) AS DOUBLE PRECISION) /
                          CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0), 0)) / NULLIF((COUNT(DISTINCT CASE
                                                                                                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0)
                                                                                                              THEN orders.id
                                                                                                          ELSE NULL END)),
                                                                                      0) AS "orders.average_total_purchase_eur"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE orders.final_status = 'DeliveredStatus'
  AND (CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) IN (0))
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
GROUP BY 1, 2, 3, 4
ORDER BY 1, 2, 3, 4;

--Session Cohorts
WITH first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.country_code

                                       FROM public.orders
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id

                                       WHERE public.orders.final_status = 'DeliveredStatus'
                                         AND orders.first_order
                                       GROUP BY 1, 4),

     sessions_table AS (SELECT customer_id,
                               creation_time
                        FROM log_mp_session_start
                        WHERE customer_id IN (SELECT customer_id FROM first_orders_category_derived))

SELECT first_orders_category_derived.country_code  AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                          AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     st.creation_time) AS INT)     AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT CASE
                          WHEN "users.cohort_months_since_first_order_after_condition" = 0
                              THEN first_orders_category_derived.customer_id
                          ELSE st.customer_id END) AS "orders.number_of_active_users"
FROM first_orders_category_derived
         LEFT JOIN sessions_table ST ON first_orders_category_derived.customer_id = st.customer_id
WHERE first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY')
  AND st.creation_time < '2021-01-01'
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      st.creation_time) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((first_orders_category_derived.min_creation_time_local) >=
       ((DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
       (first_orders_category_derived.min_creation_time_local) <
       ((DATEADD(month, 20, DATEADD(month, -19, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;


WITH first_devices_derived AS (
    SELECT DISTINCT devices.device_id, devices.user_id, min_creation_time
    FROM (SELECT user_id, min(creation_time) as min_creation_time
          FROM devices
          GROUP BY 1) as first_device
             LEFT JOIN devices ON devices.user_id = first_device.user_id
        AND first_device.min_creation_time = devices.creation_time),

     mgm_orders AS (SELECT DISTINCT orders.id       AS order_id,
                                    promotions.type AS promotion_type
                    FROM orders
                             LEFT JOIN order_pricing_applied_discounts
                                       ON order_pricing_applied_discounts.order_id = orders.id
                             LEFT JOIN promocode_uses
                                       ON order_pricing_applied_discounts.promocode_use_id = promocode_uses.id
                             LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                             LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                    WHERE promotions.type = 'MGM'),

     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name LIKE '%Organic%' OR
                                                               adj.network_name LIKE '%Homepage%' OR
                                                               adj.network_name = '' OR
                                                               adj.network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name NOT LIKE '%Organic%' AND
                                                               adj.network_name NOT LIKE '%Homepage%' AND
                                                               adj.network_name <> '' AND adj.network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Organic web'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Paid web'
                                                      WHEN mgm_orders.promotion_type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel
                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN mgm_orders ON orders.id = mgm_orders.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    LEFT JOIN first_devices_derived
                                                              ON orders.customer_id = first_devices_derived.user_id
                                                    LEFT JOIN ext_adjust_installs AS adj
                                                              ON adj.device_id = first_devices_derived.device_id
                                                    JOIN users ON orders.customer_id = users.id
                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND orders.deleted = 0) as Channel
                                                          on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6)

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY', 'AR', 'DO', 'PA')
  AND first_orders_category_derived.Channel IN ('Organic Web', 'Paid Web')
GROUP BY 1, 2, 3
ORDER BY 1, 2, 3, 4, 5;

WITH first_devices_derived AS (
    SELECT DISTINCT devices.device_id, devices.user_id, min_creation_time
    FROM (SELECT user_id, min(creation_time) as min_creation_time
          FROM devices
          GROUP BY 1) as first_device
             LEFT JOIN devices ON devices.user_id = first_device.user_id
        AND first_device.min_creation_time = devices.creation_time),

     mgm_orders AS (SELECT DISTINCT orders.id       AS order_id,
                                    promotions.type AS promotion_type
                    FROM orders
                             LEFT JOIN order_pricing_applied_discounts
                                       ON order_pricing_applied_discounts.order_id = orders.id
                             LEFT JOIN promocode_uses
                                       ON order_pricing_applied_discounts.promocode_use_id = promocode_uses.id
                             LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                             LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                    WHERE promotions.type = 'MGM'),

     first_orders_category_derived AS (SELECT orders.customer_id              AS "customer_id",
                                              MIN(orders.creation_time_local) AS "min_creation_time_local",
                                              MIN(orders.creation_time)       AS "min_creation_time",
                                              orders.city_code,
                                              orders.country_code,
                                              Channel
                                       FROM public.orders
                                                LEFT JOIN public.store_addresses
                                                          ON public.store_addresses.id = public.orders.store_address_id
                                                LEFT JOIN public.stores ON public.stores.id = public.store_addresses.store_id
                                                LEFT JOIN public.order_pricing_applied_discounts
                                                          ON public.orders.id = public.order_pricing_applied_discounts.order_id
                                                LEFT JOIN public.promocode_uses
                                                          ON public.order_pricing_applied_discounts.promocode_use_id =
                                                             public.promocode_uses.id
                                                LEFT JOIN public.promocodes
                                                          ON public.promocode_uses.promocode_id = public.promocodes.promocode_id
                                                LEFT JOIN public.promotions
                                                          ON public.promocodes.promotion_id = public.promotions.id
                                                LEFT JOIN public.bought_products
                                                          ON public.orders.id = public.bought_products.order_id
                                                LEFT JOIN public.users ON public.orders.customer_id = public.users.id
                                                LEFT JOIN (
                                           SELECT orders.customer_id,
                                                  CASE
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name LIKE '%Organic%' OR
                                                               adj.network_name LIKE '%Homepage%' OR
                                                               adj.network_name = '' OR
                                                               adj.network_name IS NULL) THEN 'Mobile Organic'
                                                      WHEN os IN ('IOS', 'ANDROID')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND (adj.network_name NOT LIKE '%Organic%' AND
                                                               adj.network_name NOT LIKE '%Homepage%' AND
                                                               adj.network_name <> '' AND adj.network_name IS NOT NULL)
                                                          THEN 'Mobile Paid'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND (orders.utm_source IS NULL OR orders.utm_source = '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          AND users.utm_source IS NULL THEN 'Organic web'
                                                      WHEN os NOT IN ('IOS', 'ANDROID')
                                                          AND
                                                           (orders.utm_source IS NOT NULL AND orders.utm_source <> '')
                                                          AND
                                                           (mgm_orders.promotion_type <> 'MGM' OR promotions.type IS NULL)
                                                          THEN 'Paid web'
                                                      WHEN mgm_orders.promotion_type = 'MGM' THEN 'MGM'
                                                      ELSE 'Others' END as Channel
                                           FROM orders
                                                    LEFT JOIN (
                                               select order_id,
                                                      min(promocode_use_id) as promocode_use_id
                                               from order_pricing_applied_discounts
                                               group by 1) as selected_promo ON orders.id = selected_promo.order_id
                                                    LEFT JOIN mgm_orders ON orders.id = mgm_orders.order_id
                                                    LEFT JOIN promocode_uses ON selected_promo.promocode_use_id = promocode_uses.id
                                                    LEFT JOIN promocodes ON promocode_uses.promocode_id = promocodes.promocode_id
                                                    LEFT JOIN promotions ON promocodes.promotion_id = promotions.id
                                                    LEFT JOIN first_devices_derived
                                                              ON orders.customer_id = first_devices_derived.user_id
                                                    LEFT JOIN ext_adjust_installs AS adj
                                                              ON adj.device_id = first_devices_derived.device_id
                                                    JOIN users ON orders.customer_id = users.id
                                           WHERE orders.first_order
                                             AND final_status = 'DeliveredStatus'
                                             AND orders.deleted = 0) as Channel
                                                          on orders.customer_id = Channel.customer_id
                                       WHERE orders.first_order
                                         AND public.orders.final_status = 'DeliveredStatus'
                                       GROUP BY 1, 4, 5, 6)

SELECT first_orders_category_derived.country_code        AS "orders.country_code",
       TO_CHAR(DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local),
               'YYYY-MM')                                AS "first_orders_category_derived.first_order_local_month",
       CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                     orders.creation_time_local) AS INT) AS "users.cohort_months_since_first_order_after_condition",
       COUNT(DISTINCT orders.customer_id)                AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.final_status = 'DeliveredStatus') AND (orders.deleted = 0) THEN orders.id
                          ELSE NULL END)                 AS "orders.number_of_delivered_orders"
FROM public.orders AS orders
         LEFT JOIN public.users AS users ON orders.customer_id = users.id
         INNER JOIN first_orders_category_derived ON orders.customer_id = first_orders_category_derived.customer_id
WHERE (orders.final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', first_orders_category_derived.min_creation_time_local,
                      orders.creation_time_local) AS INT) IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND ((((first_orders_category_derived.min_creation_time_local) >=
         ((DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
         (first_orders_category_derived.min_creation_time_local) <
         ((DATEADD(month, 16, DATEADD(month, -15, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE())))))))))
  AND first_orders_category_derived.channel IN ('Organic web', 'Paid web')
  AND first_orders_category_derived.country_code NOT IN ('BR', 'CL', 'EG', 'PR', 'TR', 'UY', 'AR', 'DO', 'PA')
GROUP BY 1, DATE_TRUNC('month', first_orders_category_derived.min_creation_time_local), 3
ORDER BY 1, 2, 3;

with unique_pricing as (
    select pricing_ondemand_country_code,
           pricing_ondemand_city_tier,
           pricing_ondemand_km_range,
           pricing_ondemand_customer_id,
           pricing_ondemand_end_date,
           max(pricing_ondemand_start_date) as pricing_ondemand_start_date,
           max(pricing_ondemand_id)         as pricing_ondemand_id
    from bi_kpis.paco_pricing_ondemand
    group by 1, 2, 3, 4, 5),
     cte_point_distances as (
         select order_id
              , point_index
              , point_type
              , point_creation_time
              , ST_DISTANCESPHERE(
                 ST_POINT(longitude, latitude),
                 ST_POINT(
                         lead(longitude, 1) over (partition by order_id order by point_index),
                         lead(latitude, 1) over (partition by order_id order by point_index)
                     )
             )::float as fd_to_next_point
         from public.order_points
     ),
     cte_fd_calc as (
         select order_id
              , max(point_index)                                       as max_point_index
              , min(point_index)                                       as min_point_index
              , max(point_creation_time)                               as max_creation_time
              , round(sum(fd_to_next_point) / 1000, 3)::decimal(10, 4) as order_distance
         from cte_point_distances
         group by 1
     ),
     cte_pricing_join as (
         select kso.order_id
              , kso.customer_id
              , sg.tier                          as city_tier
              , kso.order_country_code
              , kso.order_started_local_at::date as order_date
              , case
                    when kso.order_number_of_points > 2 or kso.order_fd_pickup_to_final_delivery_km is null
                        then cf.order_distance
                    else kso.order_fd_pickup_to_final_delivery_km
             end                                 as final_order_distance
              , ceil(final_order_distance)       as km_tier
              , case
                    when km_tier = 0
                        or km_tier is null
                        then 1
                    when km_tier <= 10
                        then km_tier
                    else 10
             end                                 as up_distance
         from bi_kpis.kpi_orders kso
                  left join cte_fd_calc cf
                            on kso.order_id = cf.order_id
                  JOIN spreadsheets.user_defined_geography_data sg
                       ON kso.order_city_code = sg.city_code
     )
        ,
     pl_aux AS (
         SELECT CASE
                    WHEN kso.order_source in ('b2b', 'b2b-api', 'B2B') AND tu.entity_tags LIKE '%LaaS_Express_Food%'
                        then 'LaaS_Express_Food'
                    WHEN kso.order_source in ('b2b', 'b2b-api', 'B2B') AND
                         tu.entity_tags LIKE '%LaaS_Express_NonFood%' or tu.entity_tags LIKE '%LaaS_Express_Grocery%' or
                         (tu.entity_tags not LIKE '%LaaS_Express_%' or tu.entity_tags is null)
                        then 'LaaS_Express_NonFood' end                            as partner_type,
                kso.order_country_code                                             as country,
                TO_CHAR(kso.order_started_local_at, 'YYIW')                        AS yyww,
                kso.customer_id,
                pc.name,
                order_final_status, --to adapt
                coalesce(package_undelivered_reason, order_cancel_reason)          AS order_cancel_reason,
                COUNT(DISTINCT kso.order_id)                                       AS total_orders,
                sum(CASE
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and kso.order_payment_status like 'PAID'
                            then kso.order_total_delivery_revenue_without_tax_eur
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and
                             kso.order_payment_status not like 'PAID' and pod.pricing_ondemand_rpo_type = 'expected' and
                             kso.order_started_local_at <= '2022-06-01'
                            then pod.pricing_ondemand_rpo * order_exchange_rate
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and
                             kso.order_payment_status not like 'PAID' and pod.pricing_ondemand_rpo_type = 'expected' and
                             kso.order_started_local_at > '2022-06-01' and
                             kso.order_started_local_at <= '2022-07-01' and kso.customer_id in
                                                                            ('115111864', '47111003', '116659495',
                                                                             '107769140', '119228565', '118321874',
                                                                             '90207906', '116730227', '115717320',
                                                                             '90207285')
                            then pod.pricing_ondemand_rpo * order_exchange_rate
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and
                             kso.order_payment_status not like 'PAID' and pod.pricing_ondemand_rpo_type = 'expected' and
                             kso.order_started_local_at > '2022-06-01' and
                             kso.order_started_local_at <= '2022-07-01' and kso.customer_id not in
                                                                            ('115111864', '47111003', '116659495',
                                                                             '107769140', '119228565', '118321874',
                                                                             '90207906', '116730227', '115717320',
                                                                             '90207285') then (((1 + (case
                                                                                                          when pod.pricing_ondemand_margin < 0
                                                                                                              then 0
                                                                                                          else pod.pricing_ondemand_margin end) /
                                                                                                     100)) *
                                                                                               order_total_cost_currlocal +
                                                                                               pod.pricing_ondemand_fixed_amount) *
                                                                                              order_exchange_rate
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and
                             kso.order_payment_status not like 'PAID' and pod.pricing_ondemand_rpo_type = 'expected' and
                             kso.order_started_local_at > '2022-07-01' then (((1 + (case
                                                                                        when pod.pricing_ondemand_margin < 0
                                                                                            then 0
                                                                                        else pod.pricing_ondemand_margin end) /
                                                                                   100)) * order_total_cost_currlocal +
                                                                             pod.pricing_ondemand_fixed_amount) *
                                                                            order_exchange_rate
                        WHEN tu.entity_tags like '%OnDemand_Variable_Pricing%' and
                             kso.order_payment_status not like 'PAID' and pod.pricing_ondemand_rpo_type = 'real'
                            then pod.pricing_ondemand_rpo * order_exchange_rate
                        else kso.order_total_delivery_revenue_without_tax_eur end) as total_rpo,
                sum(order_total_cost_eur)                                          as total_cpo
         FROM bi_kpis.kpi_orders kso
                  LEFT JOIN orders ON orders.id = kso.order_id
                  JOIN spreadsheets.user_defined_geography_data su ON su.city_code = kso.order_city_code
                  LEFT JOIN users ON kso.customer_id = users.id
                  left JOIN tagged_users tu ON users.id = tu.user_id
                  LEFT JOIN private_customer.private_customers pc ON pc.id = kso.customer_id
                  left join cte_pricing_join pj on pj.order_id = kso.order_id
                  LEFT JOIN company_details ON users.company_detail_id = company_details.id
                  left join unique_pricing up on up.pricing_ondemand_customer_id = kso.customer_id and
                                                 up.pricing_ondemand_country_code = kso.order_country_code and
                                                 up.pricing_ondemand_city_tier = su.tier and
                                                 up.pricing_ondemand_start_date <= date(kso.order_started_local_at) and
                                                 up.pricing_ondemand_end_date > date(kso.order_started_local_at) and
                                                 up.pricing_ondemand_km_range = (case
                                                                                     when (ceil(pj.up_distance) = 0 or ceil(pj.up_distance) is null)
                                                                                         then 1
                                                                                     when ceil(pj.up_distance) <= 10
                                                                                         then ceil(pj.up_distance)
                                                                                     else 10 end)
                  left join bi_kpis.paco_pricing_ondemand pod on pod.pricing_ondemand_id = up.pricing_ondemand_id
             --left join order_points dp on pj.order_id = dp.order_id and dp.point_type in ('DELIVERY')
             --left join order_points pu on pj.order_id = pu.order_id and pu.point_type in ('PICKUP')
             --left join private_customer.addresses apu on pu.address_id = apu.id
             --left join private_customer.addresses adp on dp.address_id = adp.id
                  LEFT JOIN bi_kpis.kpi_courier_delivery_packages
                            ON kso.order_id = bi_kpis.kpi_courier_delivery_packages.order_id
                  LEFT JOIN bi_kpis.kpi_parcels_state kps ON kps.parcel_states_tracking_number =
                                                             bi_kpis.kpi_courier_delivery_packages.package_partner_reference_code
                  left join order_relations on order_relations.new_order_id = kso.order_id
         WHERE order_activated_local_at >= date_trunc('week', current_date - INTERVAL '9 week')
           AND order_activated_local_at <= current_date
           AND kso.customer_id not in
               (select id from private_customer.private_customers where email LIKE '%glovoapp.com')
           AND kso.order_is_marketplace = 0
           AND (order_subvertical = 'On-Demand' OR parcel_states_shipping_service_type = 'EXPRESS')
           AND kso.order_is_deleted = 0
           and partner_type IN ('LaaS_Express_Food', 'LaaS_Express_NonFood')
           and order_relations.new_order_id is null
           and kso.order_id not in (select new_order_id from order_relations)
         GROUP BY 1, 2, 3, 4, 5, 6, 7
         ORDER BY 2
     )
SELECT yyww,
       country,
       partner_type,
       1 * sum(total_orders) AS total_orders_,
       1 * sum(total_rpo)    as total_rpo_,
       1 * sum(total_cpo)    as total_cpo_
FROM pl_aux
GROUP BY 1, 2, 3
ORDER BY 1 ASC


with returned_orders as (
    select orders.id
         , orders.country_code
         , count(distinct dp.point_index)                  as nr_del_points
         , count(distinct case
                              when 1.0 * ST_DISTANCESPHERE(ST_POINT(dp.longitude, dp.latitude),
                                                           ST_POINT(pu.longitude, pu.latitude))::FLOAT < 100
                                  then pu.point_index end) as nr_returns
    from orders
             left join tagged_users on orders.customer_id = tagged_users.user_id
             left join order_points pu on orders.id = pu.order_id and pu.point_type = 'PICKUP'
             left join order_points dp on orders.id = dp.order_id and dp.point_type = 'DELIVERY'

    where 0 = 0
      and tagged_users.entity_tags like '%LaaS_Express_Food%'
    group by 1, 2
    having nr_returns > 0
    order by 2 desc)


select to_char(orders.activation_time_local, 'yymm')
     , orders.country_code
     , pc.name
     , sum(1.00 * (DATEDIFF('s', (case
                                      when orders.scheduled_time_local notnull then orders.activation_time_local
                                      else orders.creation_time_local end), orders.delivery_time_local) / 60.0)) sum_dt
     , count(distinct orders.id)                                                   as                            nr_orders
     , 1.0 * (count(distinct (case
                                  when final_status = 'CanceledStatus' and orders.is_marketplace = 0 then orders.id
                                  else null end)) -

-- canceled < 8 and assigned < 8
              (
                  count(Distinct (case
                                      when final_status = 'CanceledStatus' and orders.is_marketplace = 0
                                          and
                                           (datediff('s', orders.creation_time_local, orders.cancellation_time_local) /
                                            60.0 <= 8
                                               or (orders.scheduled_time_local is not null and
                                                   (orders.activation_time_local is null
                                                       or (datediff('s', orders.activation_time_local,
                                                                    orders.cancellation_time_local) / 60.0 <= 8
                                                           and
                                                           (datediff('s', activation_time_local, assignment_time_local)) / 60 <= 8))))
                                          and (cancel_reason isnull or cancel_reason in
                                                                       ('SELF_CANCELLATION', 'UNKNOWN',
                                                                        'OTHER', 'DELIVERY_TAKING_TOO_LONG',
                                                                        'COURIER_NOT_ASSIGNED',
                                                                        'CUSTOMER_DOESNT_WANT_PRODUCTS'))
                                          then orders.id
                                      else null end)))

-- canceled < 40 and assigned < 8
    - count(Distinct (case
                          when final_status = 'CanceledStatus' and orders.is_marketplace = 0
                              and
                               (datediff('s', orders.creation_time_local, orders.cancellation_time_local) / 60.0 <= 40
                                   or (orders.scheduled_time_local is not null and (orders.activation_time_local is null
                                       or datediff('s', orders.activation_time_local, orders.cancellation_time_local) /
                                          60.0 <= 40 and
                                          (datediff('s', activation_time_local, assignment_time_local)) / 60 <= 8)))
                              and (cancel_reason isnull or cancel_reason in ('USER_ERROR'))
                              then orders.id
                          else null end))
    - count(Distinct (case
                          when final_status = 'CanceledStatus' and orders.is_marketplace = 0
                              and (cancel_reason in
                                   ('STORE_CLOSED', 'STORE_CAN_NOT_DELIVER',
                                    'CUSTOMER_ABSENT', 'INCORRECT_ADDRESS',
                                    'ORDER_NOT_FEASIBLE', 'PRODUCTS_NOT_AVAILABLE', 'PARTNER_PRINTER_ISSUE'))
                              then orders.id
                          else null end))
    )
                                                                                   AS                            new_hard_cancels
     , 1.0 * count(distinct (case
                                 when final_status = 'CanceledStatus' and orders.is_marketplace = 0 then orders.id
                                 else null end))                                   as                            all_cancels
     , count(distinct case
                          when 1.00 * (DATEDIFF('s', (case
                                                          when orders.scheduled_time_local notnull
                                                              then orders.activation_time_local
                                                          else orders.creation_time_local end),
                                                orders.delivery_time_local) / 60.0) <= 45
                              then orders.id end)                                  as                            count_under_45
     , count(distinct case when orders.final_status = 'DeliveredStatus' then orders.id end)                      count_all_delivered

     , sum(kpi.order_total_cost_eur)                                               as                            sum_cpo
     , count(distinct orders.customer_id)                                          as                            distinct_customers
     , count(distinct
             case when returned_orders.id is not null then returned_orders.id end) as                            nr_returned_orders
from orders
         left join bi_kpis.kpi_orders kpi on orders.id = kpi.order_id
         left join private_customer.private_customers pc on pc.id = orders.customer_id
         left join tagged_users tu on tu.user_id = pc.id
         left join returned_orders on returned_orders.id = orders.id
where 0 = 0
  and activation_time_local >= '2021-12-01'
  and orders.order_source in ('b2b', 'b2b-api', 'B2B')
  and tu.entity_tags like '%LaaS_Express_Food%'

group by 1, 2, 3;

with cte_parcel_state as (
    select parcel_states_tracking_number
    from bi_kpis.kpi_parcels_state
    where parcel_states_shipping_service_type = 'EXPRESS'
      and parcel_states_created_at >= date_trunc('month', dateadd(month, -12, current_date))
      and parcel_states_created_at < current_date
),
     cte_courier_delivery as (
         select order_id
              , last_value(package_status) over (partition by order_id order by package_updated_at
             ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_package_status
              , last_value(package_undelivered_reason) over (partition by order_id order by package_updated_at
             ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_undelivered_reason
         from bi_kpis.kpi_courier_delivery_packages
         where package_created_at >= date_trunc('month', dateadd(month, -12, current_date))
           and package_created_at < current_date
           and package_partner_reference_code in (
             select parcel_states_tracking_number
             from cte_parcel_state
         )
     ),
     cte_orders as (
         select order_id
              , customer_id
              , order_country_code
              , order_city_code
              , order_source
              , order_category
              , order_is_food
              , order_cancel_reason
              , order_final_status
              , order_started_local_at
              , order_number_of_points
              , order_fd_courier_to_pickup_km
              , order_fd_pickup_to_final_delivery_km
              , order_courier_total_distance_driven_km
              , order_bonus_coefficient
              , order_multiplier
              , order_courier_base_compensation_eur
              , order_courier_distance_compensation_eur
              , order_courier_time_compensation_eur
              , order_courier_rush_bonus_eur
              , order_courier_rain_bonus_eur
              , order_extra_point_cost_eur
              , order_courier_bundling_extra_cost_eur
              , order_courier_bundling_extra_point_cost_eur
              , order_total_cost_eur
              , order_total_cost_currlocal
              , order_total_delivery_revenue_with_tax_eur
              , order_delivery_revenue_without_tax_currlocal
              , order_total_delivery_revenue_without_tax_eur
              , order_exchange_rate
              , order_payment_status
              , ordering_payment_method
              , case
                    when order_subvertical = 'On-Demand'
                        or order_id in (
                            select order_id
                            from cte_courier_delivery
                        ) then 1 end as od_order_flag
              , case
                    when order_fd_pickup_to_final_delivery_km isnull
                        or order_number_of_points > 2
                        then 1 end   as fd_calc_flag
         from bi_kpis.kpi_supply_ops
         where order_started_local_at >= date_trunc('month', dateadd(month, -12, current_date))
           and order_started_local_at < current_date
           and order_source in ('B2B-EXP', 'B2B', 'b2b-api', 'b2b')
           and order_subtype in ('CROSS_DOCKING', 'SHIPMENT')
           AND order_category in ('QUIERO', 'COURIER')
           AND order_vertical in ('Food', 'LaaS')
           AND order_is_marketplace = 0
           AND order_is_deleted = 0
           AND order_is_b2b = 1
           and customer_id not in (select id from private_customer.private_customers where email LIKE '%glovoapp.com')
           and order_id not in (select new_order_id from order_relations)
     ),
     cte_tagged_users as (
         select pc.id as customer_id
              , entity_tags
         from tagged_users tu
                  join private_customer.private_customers pc
                       ON tu.user_id = pc.id
         where pc.id in (select customer_id from cte_orders where od_order_flag = 1)
     ),
     cte_point_distances as (
         select order_id
              , point_index
              , point_type
              , point_creation_time
              , ST_DISTANCESPHERE(
                 ST_POINT(longitude, latitude),
                 ST_POINT(
                         lead(longitude, 1) over (partition by order_id order by point_index),
                         lead(latitude, 1) over (partition by order_id order by point_index)
                     )
             )::float as fd_to_next_point
         from public.order_points
         where point_creation_time >= date_trunc('month', dateadd(month, -12, current_date))
           and point_creation_time < current_date
           and order_id in (select order_id from cte_orders where od_order_flag = 1 and fd_calc_flag = 1)
           and order_id not in (select new_order_id from order_relations)
     ),
     cte_fd_calc as (
         select order_id
              , max(point_index)                                       as max_point_index
              , min(point_index)                                       as min_point_index
              , max(point_creation_time)                               as max_creation_time
              , round(sum(fd_to_next_point) / 1000, 3)::decimal(10, 4) as order_distance
         from cte_point_distances
         group by 1
     ),
     cte_order_points as (
         select order_id,
                h3_hash_7 as locations

         from public.order_points
         where point_creation_time >= date_trunc('month', dateadd(month, -12, current_date))
           and point_creation_time < current_date
           and order_id in (select order_id from cte_orders where od_order_flag = 1)
           and order_id not in (select new_order_id from order_relations)
           and point_type = 'PICKUP'
     ),
     cte_unique_pricing as (
         select pricing_ondemand_country_code
              , pricing_ondemand_city_tier
              , pricing_ondemand_km_range
              , pricing_ondemand_customer_id
              , pricing_ondemand_end_date
              , pricing_ondemand_rpo_type
              , max(pricing_ondemand_start_date)   as pricing_ondemand_start_date
              , max(pricing_ondemand_id)           as pricing_ondemand_id
              , max(pricing_ondemand_cpo)          as pricing_ondemand_cpo
              , max(pricing_ondemand_margin)       as pricing_ondemand_margin
              , max(pricing_ondemand_fixed_amount) as pricing_ondemand_fixed_amount
              , max(pricing_ondemand_rpo)          as pricing_ondemand_rpo
         from bi_kpis.paco_pricing_ondemand
         group by 1, 2, 3, 4, 5, 6
     ),
     cte_pricing_join as (
         select co.order_id
              , co.customer_id
              , sg.tier                         as city_tier
              , co.order_country_code
              , co.order_started_local_at::date as order_date
              , case
                    when co.order_number_of_points > 2 or co.order_fd_pickup_to_final_delivery_km is null
                        then cf.order_distance
                    else co.order_fd_pickup_to_final_delivery_km
             end                                as final_order_distance
              , ceil(final_order_distance)      as km_tier
              , case
                    when km_tier = 0
                        or km_tier is null
                        then 1
                    when km_tier <= 10
                        then km_tier
                    else 10
             end                                as up_distance
         from cte_orders co
                  left join cte_fd_calc cf
                            on co.order_id = cf.order_id
                  JOIN spreadsheets.user_defined_geography_data sg
                       ON co.order_city_code = sg.city_code
     ),
     cte_cod_details as (
         select orderid,
                status,
                price,
                currency
         from spreadsheets.laas_cod
         where orderid in (select order_id from cte_orders where od_order_flag = 1)
           and orderid not in (select new_order_id from order_relations)
     ),
     cte_order_financials as (
         select case
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_Food%' then 'LaaS_Express_Food'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_NonFood%' then 'LaaS_Express_NonFood'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_Grocery%' then 'LaaS_Express_Grocery'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         (ctu.entity_tags not LIKE '%LaaS_Express_%' or ctu.entity_tags is null)
                        then 'LaaS_Express_Other'
                    when cor.order_source = 'customer' AND cor.order_category = 'COURIER' then 'C2C'
                    when cor.order_category = 'WALL - Partner' and cor.order_is_food then 'GEN 2 - Food'
                    else '!?!?' end                                                 as partner_type
              , date(DATE_TRUNC('month', cor.order_started_local_at))               as month
              , cor.customer_id
              , cor.order_country_code
              , pc.name
              , cor.order_id
              , cpj.city_tier
              , cpj.km_tier
              , coalesce(cor.order_final_status, ccd.last_package_status)           as order_status --adapted
              , cor.order_total_cost_eur                                            as system_cpo
              , cor.order_total_delivery_revenue_without_tax_eur                    as system_rpo
              , (CASE
                     WHEN ((cor.order_cancel_reason in
                            ('SELF_CANCELLATION', 'STORE_CLOSED', 'STORE_CAN_NOT_DELIVER', 'CUSTOMER_ABSENT',
                             'INCORRECT_ADDRESS', 'ORDER_NOT_FEASIBLE', 'PRODUCTS_NOT_AVAILABLE',
                             'PARTNER_PRINTER_ISSUE',
                             'USER_ERROR') or ccd.last_undelivered_reason in
                                              ('SELF_CANCELLATION', 'STORE_CLOSED', 'STORE_CAN_NOT_DELIVER',
                                               'CUSTOMER_ABSENT',
                                               'INCORRECT_ADDRESS', 'ORDER_NOT_FEASIBLE', 'PRODUCTS_NOT_AVAILABLE',
                                               'PARTNER_PRINTER_ISSUE',
                                               'USER_ERROR', 'WRONG_ADDRESS')) and cor.order_total_cost_eur <> 0) or
                          cor.order_cancel_reason is null OR ccd.last_undelivered_reason is null THEN 1.0
                     ELSE 0 END)                                                    AS order_paid

              , (CASE
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and cor.order_payment_status like 'PAID'
                         then cor.order_total_delivery_revenue_without_tax_eur
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at <= '2022-05-01' then (((1 + (case
                                                                                      when cup.pricing_ondemand_margin < 0
                                                                                          then 0
                                                                                      else cup.pricing_ondemand_margin end) /
                                                                                 100)) *
                                                                           cor.order_total_cost_currlocal +
                                                                           cup.pricing_ondemand_fixed_amount) *
                                                                          order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-05-01' and cor.order_started_local_at <= '2022-06-01'
                         then cup.pricing_ondemand_rpo * cor.order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-06-01' and cor.order_started_local_at <= '2022-07-01' and
                          cor.customer_id in
                          ('115111864', '47111003', '116659495', '107769140', '119228565', '118321874', '90207906',
                           '116730227', '115717320', '90207285') then cup.pricing_ondemand_rpo * order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-06-01' and cor.order_started_local_at <= '2022-07-01' and
                          cor.customer_id not in
                          ('115111864', '47111003', '116659495', '107769140', '119228565', '118321874', '90207906',
                           '116730227', '115717320', '90207285') then (((1 + (case
                                                                                  when cup.pricing_ondemand_margin < 0
                                                                                      then 0
                                                                                  else cup.pricing_ondemand_margin end) /
                                                                             100)) * cor.order_total_cost_currlocal +
                                                                       cup.pricing_ondemand_fixed_amount) *
                                                                      order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-07-01' then (((1 + (case
                                                                                     when cup.pricing_ondemand_margin < 0
                                                                                         then 0
                                                                                     else cup.pricing_ondemand_margin end) /
                                                                                100)) * cor.order_total_cost_currlocal +
                                                                          cup.pricing_ondemand_fixed_amount) *
                                                                         order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'real'
                         then cup.pricing_ondemand_rpo * order_exchange_rate
                     else cor.order_total_delivery_revenue_without_tax_eur end)     as rpo
              , (CASE
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and cor.order_payment_status like 'PAID'
                         then cor.order_total_delivery_revenue_without_tax_eur
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at <= '2022-05-01' then ((((1 + (case
                                                                                       when cup.pricing_ondemand_margin < 0
                                                                                           then 0
                                                                                       else cup.pricing_ondemand_margin end) /
                                                                                  100)) * order_total_cost_currlocal +
                                                                            cup.pricing_ondemand_fixed_amount) *
                                                                           order_paid) * order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-05-01' and cor.order_started_local_at <= '2022-06-01'
                         then cup.pricing_ondemand_rpo * order_exchange_rate * order_paid
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-06-01' and cor.order_started_local_at <= '2022-07-01' and
                          cor.customer_id in
                          ('115111864', '47111003', '116659495', '107769140', '119228565', '118321874', '90207906',
                           '116730227', '115717320', '90207285')
                         then cup.pricing_ondemand_rpo * order_exchange_rate * order_paid
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-06-01' and cor.order_started_local_at <= '2022-07-01' and
                          cor.customer_id not in
                          ('115111864', '47111003', '116659495', '107769140', '119228565', '118321874', '90207906',
                           '116730227', '115717320', '90207285') then ((((1 + (case
                                                                                   when cup.pricing_ondemand_margin < 0
                                                                                       then 0
                                                                                   else cup.pricing_ondemand_margin end) /
                                                                              100)) * cor.order_total_cost_currlocal +
                                                                        cup.pricing_ondemand_fixed_amount) *
                                                                       order_paid) * order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'expected' and
                          cor.order_started_local_at > '2022-07-01' then ((((1 + (case
                                                                                      when cup.pricing_ondemand_margin < 0
                                                                                          then 0
                                                                                      else cup.pricing_ondemand_margin end) /
                                                                                 100)) * order_total_cost_currlocal +
                                                                           cup.pricing_ondemand_fixed_amount) *
                                                                          order_paid) * cor.order_exchange_rate
                     WHEN ctu.entity_tags like '%OnDemand_Variable_Pricing%' and
                          cor.order_payment_status not like 'PAID' and cup.pricing_ondemand_rpo_type = 'real'
                         then cup.pricing_ondemand_rpo * order_exchange_rate * order_paid
                     else cor.order_total_delivery_revenue_without_tax_eur end)     as rpo_with_cancellations
              , (rpo - system_cpo)                                                  as cm0
              , (case when cm0 < 0 then '1' else '0' end)                              cm0_negative
              , (case when cm0 >= 0.7 then '1' else '0' end)                           cm0_70cent
              , (case when cm0 < 0.15 * rpo then '1' else '0' end)                     cm0_15percent
              , (case when cor.order_payment_status = 'PAID' then '1' else '0' end) as paid_order
              , (cup.pricing_ondemand_cpo * cor.order_exchange_rate)                as expected_cost
              , (cup.pricing_ondemand_rpo * cor.order_exchange_rate)                as expected_revenue
              , cor.order_payment_status
              , (case when cod.orderid is not null then '1' else '0' end)           as cash_order
              , (case when cod.status = 'PAID' then '1' else '0' end)               as cash_paid_order
              , (CASE
                     WHEN to_char(cor.order_started_local_at, 'HH24') between 20 and 22 and
                          to_char(cor.order_started_local_at, 'ID') between 5 and 7 then '1'
                     else '0' end)                                                  as order_peak
              , cor.order_fd_courier_to_pickup_km                                   as sp_distance
              , (case
                     when cor.fd_calc_flag = 1 then cpj.final_order_distance
                     else cor.order_fd_pickup_to_final_delivery_km end)             as pd_distance
              , cor.order_courier_total_distance_driven_km                          as total_distance_driven
              , cor.order_bonus_coefficient
              , cor.order_multiplier
              , cor.order_courier_base_compensation_eur
              , cor.order_courier_distance_compensation_eur
              , cor.order_courier_time_compensation_eur
              , cor.order_courier_rush_bonus_eur
              , cor.order_courier_rain_bonus_eur
              , cor.order_extra_point_cost_eur
              , cor.order_courier_bundling_extra_cost_eur
              , cor.order_courier_bundling_extra_point_cost_eur
              , cor.order_number_of_points
              , cod.price                                                           as cash_amount
              , (case
                     when cup.pricing_ondemand_rpo >= cor.order_delivery_revenue_without_tax_currlocal then '1'
                     else '0' end)                                                  as variable_pricing
              , cop.locations

         from cte_orders cor
                  left join cte_tagged_users as ctu
                            on cor.customer_id = ctu.customer_id
                  left join private_customer.private_customers pc
                            on pc.id = cor.customer_id
                  left join cte_pricing_join cpj
                            ON cor.order_id = cpj.order_id
                  left join cte_order_points cop
                            on cor.order_id = cop.order_id
                  left join cte_courier_delivery ccd
                            on cor.order_id = ccd.order_id
                  left join cte_cod_details cod
                            on cor.order_id = cod.orderid
                  left join cte_unique_pricing cup
                            on cup.pricing_ondemand_customer_id = cpj.customer_id
                                and cup.pricing_ondemand_country_code = cpj.order_country_code
                                and cup.pricing_ondemand_city_tier = cpj.city_tier
                                and cup.pricing_ondemand_start_date <= cpj.order_date
                                and cup.pricing_ondemand_end_date > cpj.order_date
                                and cup.pricing_ondemand_km_range = cpj.up_distance
         where cor.od_order_flag = 1
     )
select month,
       count(distinct locations) as number_locations
from cte_order_financials
where partner_type = 'LaaS_Express_Food'
group by;

with cte_parcel_state as (
    select parcel_states_tracking_number
    from bi_kpis.kpi_parcels_state
    where parcel_states_shipping_service_type = 'EXPRESS'
      and parcel_states_created_at >= date_trunc('month', dateadd(month, -12, current_date))
      and parcel_states_created_at < current_date
),
     cte_courier_delivery as (
         select order_id
              , last_value(package_status) over (partition by order_id order by package_updated_at
             ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_package_status
              , last_value(package_undelivered_reason) over (partition by order_id order by package_updated_at
             ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_undelivered_reason
         from bi_kpis.kpi_courier_delivery_packages
         where package_created_at >= date_trunc('month', dateadd(month, -12, current_date))
           and package_created_at < current_date
           and package_partner_reference_code in (
             select parcel_states_tracking_number
             from cte_parcel_state
         )
     ),
     cte_orders as (
         select order_id
              , customer_id
              , order_country_code
              , order_city_code
              , order_source
              , order_category
              , order_is_food
              , order_cancel_reason
              , order_final_status
              , order_started_local_at
              , order_number_of_points
              , order_fd_courier_to_pickup_km
              , order_fd_pickup_to_final_delivery_km
              , order_courier_total_distance_driven_km
              , order_bonus_coefficient
              , order_multiplier
              , order_courier_base_compensation_eur
              , order_courier_distance_compensation_eur
              , order_courier_time_compensation_eur
              , order_courier_rush_bonus_eur
              , order_courier_rain_bonus_eur
              , order_extra_point_cost_eur
              , order_courier_bundling_extra_cost_eur
              , order_courier_bundling_extra_point_cost_eur
              , order_total_cost_eur
              , order_total_cost_currlocal
              , order_total_delivery_revenue_with_tax_eur
              , order_delivery_revenue_without_tax_currlocal
              , order_total_delivery_revenue_without_tax_eur
              , order_exchange_rate
              , order_payment_status
              , ordering_payment_method
              , case
                    when order_subvertical = 'On-Demand'
                        or order_id in (
                            select order_id
                            from cte_courier_delivery
                        ) then 1 end as od_order_flag
              , case
                    when order_fd_pickup_to_final_delivery_km isnull
                        or order_number_of_points > 2
                        then 1 end   as fd_calc_flag
         from bi_kpis.kpi_supply_ops
         where order_started_local_at >= date_trunc('month', dateadd(month, -12, current_date))
           and order_started_local_at < current_date
           and order_source in ('B2B-EXP', 'B2B', 'b2b-api', 'b2b')
           and order_subtype in ('CROSS_DOCKING', 'SHIPMENT')
           AND order_category in ('QUIERO', 'COURIER')
           AND order_vertical in ('Food', 'LaaS')
           AND order_is_marketplace = 0
           AND order_is_deleted = 0
           AND order_is_b2b = 1
           and customer_id not in (select id from private_customer.private_customers where email LIKE '%glovoapp.com')
           and order_id not in (select new_order_id from order_relations)
     ),
     cte_tagged_users as (
         select pc.id as customer_id
              , entity_tags
         from tagged_users tu
                  join private_customer.private_customers pc
                       ON tu.user_id = pc.id
         where pc.id in (select customer_id from cte_orders where od_order_flag = 1)
     ),
     cte_order_points as (
         select order_id,
                h3_hash_7 as locations

         from public.order_points
         where point_creation_time >= date_trunc('month', dateadd(month, -12, current_date))
           and point_creation_time < current_date
           and order_id in (select order_id from cte_orders where od_order_flag = 1)
           and order_id not in (select new_order_id from order_relations)
           and point_type = 'PICKUP'
     ),
     cte_order_financials as (
         select case
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_Food%' then 'LaaS_Express_Food'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_NonFood%' then 'LaaS_Express_NonFood'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         ctu.entity_tags like '%LaaS_Express_Grocery%' then 'LaaS_Express_Grocery'
                    when cor.order_source in ('b2b', 'b2b-api', 'B2B') and
                         (ctu.entity_tags not LIKE '%LaaS_Express_%' or ctu.entity_tags is null)
                        then 'LaaS_Express_Other'
                    when cor.order_source = 'customer' AND cor.order_category = 'COURIER' then 'C2C'
                    when cor.order_category = 'WALL - Partner' and cor.order_is_food then 'GEN 2 - Food'
                    else '!?!?' end                                   as partner_type
              , date(DATE_TRUNC('month', cor.order_started_local_at)) as month
              , cop.locations

         from cte_orders cor
                  left join cte_tagged_users as ctu
                            on cor.customer_id = ctu.customer_id
                  left join cte_order_points cop
                            on cor.order_id = cop.order_id
         where cor.od_order_flag = 1
     )
select month,
       count(distinct locations) as number_locations
from cte_order_financials
where partner_type = 'LaaS_Express_Food'
group by 1;

SELECT *
FROM bi_kpis.kpi_supply_ops
--ORDER BY order_activated_at DESC
LIMIT 100;

WITH laas_orders AS (SELECT kso.order_id,
                            kso.customer_id,
                            c.client_name,
                            c.client_code,
                            kso.order_source,
                            kso.order_subtype,
                            p.parcel_states_shipping_service_type,
                            p.parcel_states_content_type,
                            kso.order_city_code,
                            kso.order_country_code,
                            kso.order_final_status,
                            p.parcel_id,
                            p.parcel_states_tracking_number,
                            kso.store_address_id,
                            kso.order_number_of_points,
                            kso.order_number_of_assignments,
                            kso.order_delivery_minutes,
                            kso.order_created_at,
                            kso.order_scheduled_at,
                            kso.order_activated_at,
                            kso.order_started_at,
                            kso.order_delivered_at,
                            kso.order_canceled_at,
                            kso.order_courier_total_distance_driven_km,
                            kso.order_bonus_reason,
                            kso.order_cancel_reason,
                            kso.order_accepted_by_courier_at,
                            kso.order_picked_up_at,
                            kso.order_payment_status,
                            kso.order_vertical,
                            kso.order_is_marketplace,
                            kso.order_is_bundled,
                            kso.order_is_canceled,
                            kso.order_canceled_type,
                            kso.order_number_of_contacts,
                            kso.order_total_cost_eur,
                            kso.order_fd_courier_to_pickup_km,
                            kso.order_fd_pickup_to_final_delivery_km,
                            kso.courier_id,
                            kso.order_last_assigned_at,
                            CASE
                                WHEN tu.entity_tags LIKE '%LaaS_Express_Food%' THEN 'LaaS_Express_Food'
                                WHEN tu.entity_tags LIKE '%LaaS_Express_NonFood%' THEN 'LaaS_Express_NonFood'
                                WHEN tu.entity_tags LIKE '%LaaS_Express_Grocery%' THEN 'LaaS_Express_Grocery'
                                WHEN (tu.entity_tags NOT LIKE '%LaaS_Express_%' or tu.entity_tags IS NULL)
                                    THEN 'LaaS_Express_Other'
                                ELSE tu.entity_tags END AS                                   partner_type,
                            datediff(minute, kso.order_activated_at, kso.order_delivered_at) activation_delivery_min,
                            CASE WHEN activation_delivery_min > 45 then true else false end  delivery_more_45min

                     FROM bi_kpis.kpi_supply_ops kso
                              LEFT JOIN bi_kpis.kpi_courier_delivery_packages dp ON kso.order_id = dp.order_id
                              LEFT JOIN bi_kpis.kpi_parcels_state p
                                        ON p.parcel_states_tracking_number = dp.package_partner_reference_code
                              LEFT JOIN bi_kpis.dim_crossdocking_partners c ON c.client_id = kso.customer_id
                              LEFT JOIN tagged_users tu ON kso.customer_id = tu.user_id

                     WHERE 1 = 1
                       AND kso.order_source IN ('B2B', 'b2b-api', 'b2b')
                       AND (p.parcel_states_shipping_service_type is null or
                            p.parcel_states_shipping_service_type = 'EXPRESS')
)
SELECT (TO_CHAR(DATE_TRUNC('month', laas_orders.order_created_at), 'YYYY-MM')) AS "laas_orders.created_at_month",
       COUNT(DISTINCT CASE
                          WHEN (laas_orders.order_final_status = 'DeliveredStatus') THEN laas_orders.order_id
                          ELSE NULL END)                                       AS "laas_orders.delivered_orders",
       COUNT(DISTINCT CASE
                          WHEN (laas_orders.order_final_status = 'DeliveredStatus') AND
                               (laas_orders.order_subtype = 'CROSS_DOCKING') THEN laas_orders.order_id
                          ELSE NULL END)                                       AS "crossdocking_orders"
FROM laas_orders
WHERE (((laas_orders.order_created_at) >= ((DATEADD(month, -5, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))) AND
        (laas_orders.order_created_at) <
        ((DATEADD(month, 6, DATEADD(month, -5, DATE_TRUNC('month', DATE_TRUNC('day', GETDATE()))))))))
GROUP BY (DATE_TRUNC('month', laas_orders.order_created_at))
ORDER BY 1 DESC

SELECT COUNT(DISTINCT order_id)
FROM bi_kpis.kpi_orders
WHERE order_final_status = 'DeliveredStatus'
  AND (TO_CHAR(DATE_TRUNC('month', order_created_at), 'YYYY-MM')) = '2023-01';

WITH first_orders_delivery_time AS (SELECT ko.customer_id                   AS customer_id,
                                           MIN(ko.order_activated_local_at) AS min_activation_time_local,
                                           CASE
                                               WHEN ko.order_delivery_minutes < 15 THEN '<15min'
                                               WHEN ko.order_delivery_minutes >= 15 AND ko.order_delivery_minutes < 20
                                                   THEN '15 to 20'
                                               WHEN ko.order_delivery_minutes >= 20 AND ko.order_delivery_minutes < 25
                                                   THEN '20 to 25'
                                               WHEN ko.order_delivery_minutes >= 25 AND ko.order_delivery_minutes < 30
                                                   THEN '25 to 30'
                                               WHEN ko.order_delivery_minutes >= 30 AND ko.order_delivery_minutes < 35
                                                   THEN '30 to 35'
                                               WHEN ko.order_delivery_minutes >= 35 AND ko.order_delivery_minutes < 40
                                                   THEN '35 to 40'
                                               WHEN ko.order_delivery_minutes >= 40 AND ko.order_delivery_minutes < 45
                                                   THEN '40 to 45'
                                               WHEN ko.order_delivery_minutes >= 45 AND ko.order_delivery_minutes < 60
                                                   THEN '45 to 60'
                                               ELSE '>60min' END            AS fo_delivery_time
                                    FROM bi_kpis.kpi_orders ko
                                    WHERE ko.order_final_status = 'DeliveredStatus'
                                      AND ko.order_is_first_order
                                      AND ko.order_country_code = 'ES'
                                    GROUP BY 1, 3)

SELECT fdt.fo_delivery_time,
       CAST(DATEDIFF('MONTH', fdt.min_activation_time_local,
                     orders.order_activated_local_at) AS INT) AS cohort_months_since_first_order_after_condition,
       COUNT(DISTINCT orders.customer_id)                     AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE
                          WHEN (orders.order_final_status = 'DeliveredStatus') AND (orders.order_is_deleted = 'NO')
                              THEN orders.order_id
                          ELSE NULL END)                      AS "orders.number_of_delivered_orders"
FROM bi_kpis.kpi_orders AS orders
         INNER JOIN first_orders_delivery_time fdt ON orders.customer_id = fdt.customer_id
WHERE (orders.order_final_status = 'DeliveredStatus')
  AND ((CAST(DATEDIFF('MONTH', fdt.min_activation_time_local,
                      orders.order_activated_local_at) AS INT) IN
        (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
  AND (TO_CHAR(DATE_TRUNC('month', fdt.min_activation_time_local), 'YYYY-MM')) >= '2022-01'
  AND (TO_CHAR(DATE_TRUNC('month', fdt.min_activation_time_local), 'YYYY-MM')) < '2022-07'
GROUP BY 1, 2
ORDER BY 1, 2, 3;

WITH first_orders_delivery_time AS (SELECT ko.customer_id                   AS customer_id,
                                           MIN(ko.order_activated_local_at) AS min_activation_time_local,
                                           CASE
                                               WHEN ko.order_delivery_minutes < 15 THEN 'below 15min'
                                               WHEN ko.order_delivery_minutes >= 15 AND ko.order_delivery_minutes < 20
                                                   THEN '15 to 20'
                                               WHEN ko.order_delivery_minutes >= 20 AND ko.order_delivery_minutes < 25
                                                   THEN '20 to 25'
                                               WHEN ko.order_delivery_minutes >= 25 AND ko.order_delivery_minutes < 30
                                                   THEN '25 to 30'
                                               WHEN ko.order_delivery_minutes >= 30 AND ko.order_delivery_minutes < 35
                                                   THEN '30 to 35'
                                               WHEN ko.order_delivery_minutes >= 35 AND ko.order_delivery_minutes < 40
                                                   THEN '35 to 40'
                                               WHEN ko.order_delivery_minutes >= 40 AND ko.order_delivery_minutes < 45
                                                   THEN '40 to 45'
                                               WHEN ko.order_delivery_minutes >= 45 AND ko.order_delivery_minutes < 60
                                                   THEN '45 to 60'
                                               ELSE 'above 60min' END       AS fo_delivery_time
                                    FROM bi_kpis.kpi_orders ko
                                    WHERE ko.order_final_status = 'DeliveredStatus'
                                      AND ko.order_is_first_order
                                      AND ko.order_country_code = 'ES'
                                    GROUP BY 1, 3),

     recurrent_users AS (SELECT orders.customer_id,
                                COUNT(DISTINCT orders.order_id) orders_per_customer
                         FROM bi_kpis.kpi_orders AS orders
                                  INNER JOIN first_orders_delivery_time fdt ON orders.customer_id = fdt.customer_id
                         WHERE orders.order_final_status = 'DeliveredStatus'
                           AND (TO_CHAR(DATE_TRUNC('month'
                                            , fdt.min_activation_time_local)
                             , 'YYYY-MM')) >= '2022-01'
                           AND (TO_CHAR(DATE_TRUNC('month'
                                            , fdt.min_activation_time_local)
                             , 'YYYY-MM'))
                             < '2022-07'
                           AND CAST(DATEDIFF('MONTH'
                             , fdt.min_activation_time_local
                             , orders.order_activated_local_at) AS INT)
                             < 7
                         GROUP BY 1
                         ORDER BY 1, 2)

SELECT fdt.fo_delivery_time,
       COUNT(DISTINCT orders.customer_id)                                                         AS "orders.number_of_active_users",
       COUNT(DISTINCT CASE WHEN ru.orders_per_customer > 1 THEN orders.customer_id ELSE NULL END) AS retained_users,
       COUNT(DISTINCT CASE
                          WHEN (orders.order_final_status = 'DeliveredStatus') AND (orders.order_is_deleted = 'NO')
                              THEN orders.order_id
                          ELSE NULL END)                                                          AS "orders.number_of_delivered_orders"
FROM bi_kpis.kpi_orders AS orders
         INNER JOIN first_orders_delivery_time fdt ON orders.customer_id = fdt.customer_id
         LEFT JOIN recurrent_users ru ON orders.customer_id = ru.customer_id
WHERE orders.order_final_status = 'DeliveredStatus'
  AND (TO_CHAR(DATE_TRUNC('month', fdt.min_activation_time_local), 'YYYY-MM')) >= '2022-01'
  AND (TO_CHAR(DATE_TRUNC('month', fdt.min_activation_time_local), 'YYYY-MM')) < '2022-07'
  AND CAST(DATEDIFF('MONTH', fdt.min_activation_time_local, orders.order_activated_local_at) AS INT) < 7
GROUP BY 1
ORDER BY 1, 2, 3, 4;


SELECT order_city_code,
       COUNT(DISTINCT order_id)
FROM bi_kpis.kpi_orders
WHERE (TO_CHAR(DATE_TRUNC('month', order_created_at), 'YYYY-MM')) >= '2023-01'
  AND order_country_code = 'ES'
GROUP BY 1;

SELECT *
FROM orders
WHERE id = 585640461;

SELECT *
FROM bi_kpis.kpi_orders
WHERE order_id = 585640461;

SELECT *
FROM city_saturation_histories
WHERE city_code = 'BCN'
  AND (TO_CHAR(DATE_TRUNC('month', creation_time), 'YYYY-MM')) = '2023-03'
  AND partner_mode;

SELECT *
FROM dynamic_radii_last_run_logs
WHERE city_code = 'BCN'
ORDER BY run_date DESC
LIMIT 100;

SELECT DISTINCT status_name
FROM dynamic_radii_last_run_logs;

SELECT DISTINCT partner_radii
FROM dynamic_radii_statuses_conditions
WHERE status_name ILIKE 'GEN%';

SELECT *
FROM dynamic_radii_last_run_logs drl
         JOIN dynamic_radii_statuses_conditions drs
              ON drl.status_name = drs.status_name AND drl.city_code = drs.city_code
WHERE drs.partner_radii BETWEEN 0 AND 1
ORDER BY run_date DESC
LIMIT 100;

WITH run_logs_derived AS (SELECT id,
                                 city_code,
                                 run_date,
                                 LEAD(run_date, 1) OVER (PARTITION BY city_code ORDER BY run_date) finish_date,
                                 status_name
                          FROM dynamic_radii_last_run_logs
                          WHERE (TO_CHAR(DATE_TRUNC('month', run_date), 'YYYY-MM')) = '2023-03') --HERE INCLUDE THE PERIOD OF TIME THAT THE ANALYSIS IS GOING TO RUN

SELECT drl.id,
       drl.city_code,
       drl.run_date,
       drl.finish_date
FROM run_logs_derived drl
         JOIN dynamic_radii_statuses_conditions drs
              ON drl.status_name = drs.status_name AND drl.city_code = drs.city_code
WHERE drs.partner_radii BETWEEN 0 AND 1
ORDER BY run_date DESC;

WITH run_logs_derived AS (
    SELECT id,
           city_code,
           run_date,
           LEAD(run_date, 1) OVER (PARTITION BY city_code ORDER BY run_date) AS finish_date,
           status_name
    FROM dynamic_radii_last_run_logs
    WHERE TO_CHAR(DATE_TRUNC('month', run_date), 'YYYY-MM') = '2023-03'
),
     selected_columns AS (
         SELECT rld.id, rld.city_code, run_date, finish_date
         FROM run_logs_derived rld
                  JOIN dynamic_radii_statuses_conditions drs ON rld.status_name = drs.status_name
             AND rld.city_code = drs.city_code
         WHERE drs.partner_radii BETWEEN 0 AND 1
     )
SELECT *
FROM selected_columns
ORDER BY run_date DESC;

WITH run_logs_derived AS (SELECT city_code,
                                 run_date,
                                 LEAD(run_date, 1) OVER (PARTITION BY city_code ORDER BY run_date) finish_date,
                                 status_name
                          FROM dynamic_radii_last_run_logs
                          WHERE (TO_CHAR(DATE_TRUNC('month', run_date), 'YYYY-MM')) = '2023-03'), --HERE INCLUDE THE PERIOD OF TIME THAT THE ANALYSIS IS GOING TO RUN

     city_radii_reduced_times AS (SELECT drl.city_code,
                                         drl.run_date,
                                         drl.finish_date
                                  FROM run_logs_derived drl
                                           JOIN dynamic_radii_statuses_conditions drs
                                                ON drl.status_name = drs.status_name AND drl.city_code = drs.city_code
                                  WHERE (partner_reduction_type = 'ABSOLUTE' AND partner_radii > 0)
                                     OR (partner_reduction_type = 'RELATIVE' AND partner_radii > 0 AND
                                         partner_radii < 1)
                                  ORDER BY run_date DESC)

SELECT ko.order_id,
       ko.order_city_code,
       crrt.city_code,
       ko.order_activated_at,
       crrt.run_date,
       crrt.finish_date
FROM bi_kpis.kpi_orders ko
         JOIN city_radii_reduced_times crrt ON ko.order_city_code = crrt.city_code AND
                                               ko.order_activated_at BETWEEN crrt.run_date and crrt.finish_date;

SELECT customer_id,
       COUNT(DISTINCT order_id),
       MIN(order_created_at)
FROM bi_kpis.kpi_orders
WHERE customer_id IN
      (141699996, 143773934, 141708070, 142373985, 143697161, 135617158, 47717124, 142743111, 141135862, 142728558,
       143543779, 143772972, 143508456, 143693456, 128592737, 29934999)
  AND order_created_at >= '2023-01-01'
GROUP BY 1;

SELECT distinct partner_radii
FROM dynamic_radii_statuses_conditions
WHERE partner_reduction_type = 'RELATIVE';

SELECT *
FROM dynamic_radii_statuses_conditions
WHERE partner_reduction_type = 'RELATIVE'
  AND partner_radii > 1;

SELECT DISTINCT partner_reduction_type
from dynamic_radii_statuses_conditions;


SELECT status_name,
       partner_radii,
       partner_reduction_type
FROM dynamic_radii_statuses_conditions drs
WHERE (partner_reduction_type = 'ABSOLUTE' AND partner_radii > 0)
   OR (partner_reduction_type = 'RELATIVE' AND partner_radii > 0 AND partner_radii < 1);

SELECT *
FROM geography
WHERE code = 'PAL';

SELECT TO_CHAR(DATE_TRUNC('month', order_created_local_at), 'YYYY-MM') AS order_month,
       COUNT(DISTINCT order_id)                                        AS total_del_orders,
       COUNT(DISTINCT CASE
                          WHEN order_source in ('B2B', 'b2b-api', 'b2b') THEN order_id
                          ELSE NULL END)                               AS total_od_del_orders
FROM bi_kpis.kpi_orders
WHERE 1 = 1
  AND order_country_code = 'ES'
  AND order_final_status = 'DeliveredStatus'
  AND order_created_local_at >= '2022-01-01'
GROUP BY 1
ORDER BY 1;

SELECT EXTRACT(HOUR FROM order_created_local_at) AS order_hour,
       COUNT(DISTINCT order_id)                  AS total_del_orders,
       COUNT(DISTINCT CASE
                          WHEN order_source in ('B2B', 'b2b-api', 'b2b') THEN order_id
                          ELSE NULL END)         AS total_od_del_orders
FROM bi_kpis.kpi_orders
WHERE 1 = 1
  AND order_country_code = 'ES'
  AND order_final_status = 'DeliveredStatus'
  AND order_created_local_at >= '2023-01-01'
  AND order_created_local_at < '2023-04-01'
GROUP BY 1
ORDER BY 1;

WITH od_couriers AS (SELECT DISTINCT courier_id
                     FROM bi_kpis.kpi_orders
                     WHERE order_source in ('B2B', 'b2b-api', 'b2b')
                       AND order_created_local_at >= '2023-03-01'
                       AND order_created_local_at < '2023-04-01'
                       AND order_country_code = 'ES'),

     total_orders_couriers_od AS (SELECT ko.courier_id,
                                         COUNT(DISTINCT order_id) as total_orders
                                  FROM bi_kpis.kpi_orders ko
                                           INNER JOIN od_couriers oc ON ko.courier_id = oc.courier_id
                                      AND order_created_local_at >= '2023-03-01'
                                      AND order_created_local_at < '2023-04-01'
                                  GROUP BY 1),

     od_customers AS (SELECT DISTINCT customer_id
                      FROM bi_kpis.kpi_orders
                      WHERE order_source in ('B2B', 'b2b-api', 'b2b')
                        AND order_created_local_at >= '2023-03-01'
                        AND order_created_local_at < '2023-04-01'
                        AND order_country_code = 'ES'),

     total_cou_cust_orders AS (SELECT ko.courier_id,
                                      ko.customer_id,
                                      COUNT(DISTINCT order_id) total_order_per_cou_cust
                               FROM bi_kpis.kpi_orders ko
                                        INNER JOIN od_couriers oc ON ko.courier_id = oc.courier_id
                               WHERE 1 = 1
                                 AND order_created_local_at >= '2023-03-01'
                                 AND order_created_local_at < '2023-04-01'
                               GROUP BY 1, 2),
     max_od_cust AS (SELECT tcc.courier_id,
                            TRUNC(MAX(tcc.total_order_per_cou_cust * 1.00 / toc.total_orders * 1.00), 2) max_od
                     FROM total_cou_cust_orders tcc
                              LEFT JOIN total_orders_couriers_od toc ON tcc.courier_id = toc.courier_id
                     WHERE customer_id IN (SELECT * FROM od_customers)
                       AND toc.total_orders > 1
                     GROUP BY 1
                     ORDER BY 2 DESC)

SELECT CASE
           WHEN max_od < 0.05 THEN '0.0'
           WHEN (max_od >= 0.05 AND max_od < 0.1) THEN '0.05'
           ELSE TRUNC(max_od, 1) END as max_od_store,
       COUNT(DISTINCT courier_id)       total_couriers
FROM max_od_cust
GROUP BY 1;

SELECT customer_id,
       COUNT(DISTINCT order_id)
FROM bi_kpis.kpi_orders
WHERE order_source in ('B2B', 'b2b-api', 'b2b')
  AND order_created_local_at >= '2023-03-01'
  AND order_created_local_at < '2023-04-01'
  AND order_country_code = 'IT'
GROUP BY 1
ORDER BY 2 DESC;

select distinct(kso.order_id)                                 as order_id,
               kso.country_code,
               pc.name,
               kso.customer_id,
               case
                   when kso.order_source in ('b2b', 'b2b-api', 'B2B') and tu.entity_tags like '%LaaS_Express_Food%'
                       then 'LaaS_Express_Food'
                   when kso.order_source in ('b2b', 'b2b-api', 'B2B') and tu.entity_tags like '%LaaS_Express_NonFood%'
                       then 'LaaS_Express_NonFood'
                   when kso.order_source in ('b2b', 'b2b-api', 'B2B') and tu.entity_tags like '%GlovoAcces%'
                       then 'GlovoAccess'
                   WHEN kso.order_source IN ('B2B-EXP', 'B2B', 'b2b', 'b2b-api') and
                        (tu.entity_tags NOT LIKE '%LaaS_Express_%' OR tu.entity_tags IS NULL) THEN 'LaaS_Express_Other'
                   else '!?!?' end                            as partner_type,
               kso.order_subtype                              as order_subtype,
               date_trunc('week', Kso.order_created_at)       as order_week,
               kso.order_final_status,
               kso.order_cancel_reason,
               kkc.kustomer_conversation_first_contact_reason as first_courier_reason,
               kkc.kustomer_conversation_contact_reason_tree  as contact_reason_agent,
               concat('https://glovo.kustomerapp.com/app/conversations/',
                      kkc.kustomer_conversation_id)           AS conversation_link,
               CASE
                   WHEN kso.order_subtype != 'CROSS_DOCKING' THEN kkc.kustomer_active_flow
                   WHEN kso.order_subtype = 'CROSS_DOCKING' and (right(kkc.kustomer_active_flow, 2) = 'ok')
                       THEN 'Automated - Full'
                   WHEN kso.order_subtype = 'CROSS_DOCKING' and (right(kkc.kustomer_active_flow, 2) = 'ko')
                       THEN 'Automated - Partial'
                   WHEN kso.order_subtype = 'CROSS_DOCKING' and (right(kkc.kustomer_active_flow, 2) = 'na')
                       THEN 'Not attended'
                   WHEN kso.order_subtype = 'CROSS_DOCKING' and (right(kkc.kustomer_active_flow, 2) = 'ag') THEN 'Agent'
                   when kso.order_subtype = 'CROSS_DOCKING' and kkc.kustomer_conversation_first_contact_reason in
                                                                ('couriers.ongoing_order3.customer_issues.customer_absent_not_reachable_at_dp',
                                                                 'couriers_1.ongoing.issues_after_pu_at_dp.customer_absent_not_reachable_at_dp1')
                            and kkc.kustomer_active_flow = 'lost_closed' or
                        kkc.kustomer_active_flow = 'abandoned_closed' THEN 'Post automation, no agent response'

                   when kso.order_subtype = 'CROSS_DOCKING' and kkc.kustomer_conversation_first_contact_reason in
                                                                ('couriers.ongoing_order3.customer_issues.customer_absent_not_reachable_at_dp',
                                                                 'couriers_1.ongoing.issues_after_pu_at_dp.customer_absent_not_reachable_at_dp1')
                       and kkc.kustomer_active_flow is null then 'automation did not start,went to agent'

                   when kso.order_subtype = 'CROSS_DOCKING' and kkc.kustomer_conversation_first_contact_reason not in
                                                                ('couriers.ongoing_order3.customer_issues.customer_absent_not_reachable_at_dp',
                                                                 'couriers_1.ongoing.issues_after_pu_at_dp.customer_absent_not_reachable_at_dp1')
                       and kkc.kustomer_active_flow is null then 'Agent'
                   ELSE '?????????' END                          active_flow,
               kkc.kustomer_active_flow

FROM bi_kpis.kpi_supply_ops kso
         LEFT JOIN bi_kpis.kpi_courier_delivery_packages dp ON kso.order_id = dp.order_id
         LEFT JOIN bi_kpis.kpi_parcels_state p ON p.parcel_states_tracking_number = dp.package_partner_reference_code
         LEFT JOIN bi_kpis.dim_crossdocking_partners c ON c.client_id = kso.customer_id
         LEFT JOIN tagged_users tu on kso.customer_id = tu.user_id
         LEFT JOIN private_customer.private_customers pc on pc.id = Kso.customer_id
         LEFT join bi_kpis.kpi_kustomer_conversations kkc on kkc.order_id = kso.order_id

WHERE 1 = 1
  AND kso.order_source IN ('B2B', 'b2b-api', 'b2b')
  AND (p.parcel_states_shipping_service_type is null or p.parcel_states_shipping_service_type = 'EXPRESS')
  AND kso.order_created_at >= date_trunc('week', DATEADD(week, -1, current_date))
  AND kso.order_created_at <= date_trunc('week', current_date)
  and kkc.kustomer_conversation_channel_grouped not in ('note', 'voice')
  and kkc.kustomer_call_direction = 'in'
  and kkc.kustomer_conversation_user_type_clean = 'glover'
  and (kkc.kustomer_conversation_contact_reason_tree in
       ('couriers.ongoing_order3.customer_issues.customer_absent_not_reachable_at_dp',
        'couriers_1.ongoing.issues_after_pu_at_dp.customer_absent_not_reachable_at_dp1')
    or kkc.kustomer_conversation_first_contact_reason in
       ('couriers.ongoing_order3.customer_issues.customer_absent_not_reachable_at_dp',
        'couriers_1.ongoing.issues_after_pu_at_dp.customer_absent_not_reachable_at_dp1'))
  and partner_type <> '!?!?'
  and partner_type <> 'GlovoAccess';

SELECT TO_CHAR(DATE_TRUNC('month', order_created_at), 'YYYY-MM'),
       order_city_code,
       COUNT(DISTINCT order_id)
FROM bi_kpis.kpi_orders
WHERE 1 = 1
  AND order_created_at >= '2023-03-01'
  AND order_created_at < '2023-04-01'
--AND order_final_status = 'DeliveredStatus'
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND order_country_code = 'ES'
GROUP BY 1, 2;

SELECT TO_CHAR(DATE_TRUNC('month', order_created_at), 'YYYY-MM') order_month,
       COUNT(DISTINCT order_id)          as                      total_orders,
       COUNT(DISTINCT CASE
                          WHEN (client_name ILIKE '%flipdish%' OR client_name ILIKE 'kitch%' OR
                                client_name ILIKE '%watson%' OR client_name ILIKE '%Delivergo%' OR
                                client_name ILIKE '%Fabrice tagne nzali%') THEN order_id
                          ELSE NULL END) AS                      total_orders_integ
FROM bi_kpis.kpi_orders ko
         LEFT JOIN bi_kpis.dim_crossdocking_partners dcp ON ko.customer_id = dcp.client_id
WHERE 1 = 1
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND order_created_at >= '2022-01-01'
  AND ko.order_country_code = 'ES'
GROUP BY 1
ORDER BY 1;

SELECT *
FROM bi_kpis.dim_crossdocking_partners
WHERE client_name ILIKE '%flipdish%'
   OR client_name ILIKE 'kitch%'
   OR client_name ILIKE '%watson%'
   OR client_name ILIKE '%Delivergo%'
   OR client_name ILIKE '%Fabrice tagne nzali%';

SELECT TO_CHAR(DATE_TRUNC('month', order_created_at), 'YYYY-MM') order_month,
       COUNT(DISTINCT order_id)          as                      total_orders,
       COUNT(DISTINCT CASE
                          WHEN (client_name ILIKE '%flipdish%' OR client_name ILIKE 'kitch%' OR
                                client_name ILIKE '%watson%' OR client_name ILIKE '%Delivergo%' OR
                                client_name ILIKE '%Fabrice tagne nzali%') THEN order_id
                          ELSE NULL END) AS                      total_orders_integ
FROM bi_kpis.kpi_orders ko
         LEFT JOIN bi_kpis.dim_crossdocking_partners dcp ON ko.customer_id = dcp.client_id
         LEFT JOIN tagged_users tu ON ko.customer_id = tu.user_id
WHERE 1 = 1
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND order_created_at >= '2022-01-01'
  AND ko.order_country_code = 'ES'
  AND tu.entity_tags ILIKE '%LaaS_Express_Food%'
GROUP BY 1
ORDER BY 1;

WITH next_assignation_derived AS (SELECT *,
                                         LEAD(order_last_assigned_local_at)
                                         over (partition by courier_id order by order_activated_local_at) courier_next_assignation
                                  FROM bi_kpis.kpi_supply_ops
                                  WHERE 1 = 1
                                    AND order_country_code IN ('ES', 'RO', 'GE') --CHECK IF WE WANT TO INCLUDE MORE COUNTRIES
                                    AND order_activated_local_at >= '2023-01-01' --CHECK IF IT MATCHES ALL THE DATES
)

SELECT TO_CHAR(DATE_TRUNC('month', order_activated_local_at), 'YYYY-MM') order_month,
       order_country_code,
       SUM(CAST((DATEDIFF(SECONDS, order_last_assigned_local_at,
                          GREATEST(courier_next_assignation, order_delivered_local_at)) /
                 60) AS DOUBLE PRECISION)) as                            total_minutes
FROM next_assignation_derived
WHERE 1 = 1
  AND DATE_TRUNC('day', order_last_assigned_local_at) = DATE_TRUNC('day', courier_next_assignation)
  AND courier_next_assignation IS NOT NULL
  AND order_source in ('B2B', 'b2b-api', 'b2b')
GROUP BY 1, 2
ORDER BY 1, 2;

SELECT order_country_code,
       COUNT(DISTINCT
             CASE WHEN order_final_status = 'DeliveredStatus' THEN order_id ELSE NULL END) AS total_delivered_orders,
       COUNT(DISTINCT order_id)                                                            AS total_orders
FROM bi_kpis.kpi_orders
WHERE order_created_local_at >= '2023-03-01'
  AND order_created_local_at < '2023-04-01'
GROUP BY 1
ORDER by 3 DESC;

SELECT *
FROM geography
WHERE country_code = 'MD';

WITH od_first_order AS (SELECT customer_id,
                               MIN(order_activated_local_at) AS first_order
                        FROM bi_kpis.kpi_orders
                        WHERE 1 = 1
                          --AND order_final_status = 'DeliveredStatus'
                          AND order_source in ('B2B', 'b2b-api', 'b2b')
                          AND order_country_code = 'ES'
                        GROUP BY 1)

SELECT ofo.customer_id,
       CAST(DATEDIFF('MONTH', ofo.first_order, ko.order_activated_local_at) AS INT) AS months_since_first_order,
       TO_CHAR(DATE_TRUNC('month', ofo.first_order), 'YYYY-MM')                        firts_order_month,
       COUNT(DISTINCT ko.order_id)
FROM od_first_order ofo
         JOIN bi_kpis.kpi_orders ko ON ofo.customer_id = ko.customer_id
WHERE 1 = 1
  AND order_country_code = 'ES'
  AND first_order >= '2022-07-01'
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND ko.order_created_local_at < '2023-05-01'
  AND CAST(DATEDIFF('MONTH', ofo.first_order, ko.order_activated_local_at) AS INT) IS NOT NULL
GROUP BY 1, 2, 3;

WITH od_first_order AS (SELECT customer_id,
                               MIN(order_activated_local_at) AS first_order
                        FROM bi_kpis.kpi_orders
                        WHERE 1 = 1
                          --AND order_final_status = 'DeliveredStatus'
                          AND order_source in ('B2B', 'b2b-api', 'b2b')
                          AND order_country_code = 'ES'
                        GROUP BY 1)

SELECT ofo.customer_id,
       cp.client_name,
       cp.country_code
FROM od_first_order ofo
         JOIN bi_kpis.dim_crossdocking_partners cp ON ofo.customer_id = cp.client_id
WHERE 1 = 1
  AND first_order >= '2022-07-01'
  AND cp.country_code = 'ES'
GROUP BY 1, 2, 3;

SELECT customer_id,
       TO_CHAR(DATE_TRUNC('month', MIN(order_activated_local_at)), 'YYYY-MM') AS first_order_month,
       order_country_code,
       client_name
FROM bi_kpis.kpi_orders ko
         JOIN bi_kpis.dim_crossdocking_partners cp ON ko.customer_id = cp.client_id
WHERE 1 = 1
  --AND order_final_status = 'DeliveredStatus'
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND customer_id IN
      (143773934, 142027828, 144051492, 142731704, 47717124, 142728558, 143693456, 141242531, 141708070, 142055883,
       135617158, 58239307, 139832235, 9487537, 141699996, 118399763, 140078686, 141135862, 143543779, 140135176,
       140284261, 140284175, 141308876, 141914827, 140138945, 140138466, 140138807, 140138663, 140881074, 140935319,
       119207837, 137797148, 137797267, 139434608, 119228565, 140086110, 139336521, 138746678, 138746767, 138747089,
       138746910, 138747003, 138746810, 138746846, 141040510, 142770151, 142741973, 142725792, 86592912, 2198200,
       132018743, 132019033, 132018575, 132018846, 132018392, 132019141, 132025701, 137898315, 141730003, 141729835,
       141730146, 8780530, 140077235, 49301775, 33696754, 141304821, 141736522, 142184992, 142644090, 142643657,
       141377153, 142112946, 143782935, 142979567, 142979053, 143692956, 142067852, 142474834, 144034570, 143780617,
       141608031, 143365245, 141288849, 143208639, 135895273, 141392859, 143365465, 143709783, 140254565, 137692752)
GROUP BY 3, 1, 4
ORDER BY 2;

WITH od_first_order AS (SELECT client_name,
                               MIN(order_activated_local_at) AS first_order
                        FROM bi_kpis.kpi_orders o
                                 JOIN bi_kpis.dim_crossdocking_partners p ON o.customer_id = p.client_id
                        WHERE 1 = 1
                          --AND order_final_status = 'DeliveredStatus'
                          AND order_source in ('B2B', 'b2b-api', 'b2b')
                          AND order_country_code = 'ES'
                          AND client_name IS NOT NULL
                        GROUP BY 1)

SELECT ofo.client_name,
       CAST(DATEDIFF('MONTH', ofo.first_order, ko.order_activated_local_at) AS INT) AS months_since_first_order,
       TO_CHAR(DATE_TRUNC('month', ofo.first_order), 'YYYY-MM')                        firts_order_month,
       COUNT(DISTINCT ko.order_id)
FROM od_first_order ofo
         JOIN (SELECT *
               FROM bi_kpis.kpi_orders ord
                        JOIN bi_kpis.dim_crossdocking_partners par ON ord.customer_id = par.client_id) ko
              ON ofo.client_name = ko.client_name
WHERE 1 = 1
  AND order_country_code = 'ES'
  AND first_order >= '2022-07-01'
  AND order_source in ('B2B', 'b2b-api', 'b2b')
  AND ko.order_created_local_at < '2023-05-01'
  AND CAST(DATEDIFF('MONTH', ofo.first_order, ko.order_activated_local_at) AS INT) IS NOT NULL
  AND ofo.client_name IS NOT NULL
GROUP BY 1, 2, 3;


-- 15th & 100th order date
WITH order_ranking AS (SELECT customer_id,
                              order_country_code,
                              order_created_local_at,
                              RANK() OVER (PARTITION BY customer_id ORDER BY order_created_local_at) ranking
                       FROM bi_kpis.kpi_orders
                       WHERE order_source in ('B2B', 'b2b-api', 'b2b'))

SELECT *
FROM order_ranking
WHERE ranking IN (15, 100)
  AND order_created_local_at >= '2022-10-01';


-- 15th & 100th order date
WITH order_ranking AS (SELECT client_name,
                              order_country_code,
                              order_created_local_at,
                              RANK() OVER (PARTITION BY client_name ORDER BY order_created_local_at) ranking
                       FROM bi_kpis.kpi_orders o
                                JOIN bi_kpis.dim_crossdocking_partners p ON o.customer_id = p.client_id
                       WHERE order_source in ('B2B', 'b2b-api', 'b2b')
                         AND client_id IN
                             (141734608, 141734324, 137626540, 137634386, 137633555, 137633075, 137632642, 145204508, 143726879))
SELECT *
FROM order_ranking
WHERE ranking IN (15, 100);

SELECT *
FROM bi_kpis.dim_crossdocking_partners
WHERE client_name = 'Divaka';

WITH monthly_orders_table AS (SELECT client_name,
       o.order_country_code,
       TO_CHAR(DATE_TRUNC('month', order_created_local_at), 'YYYY-MM'),
       COUNT(DISTINCT order_id) monthly_orders
FROM bi_kpis.kpi_orders o
         JOIN bi_kpis.dim_crossdocking_partners p ON o.customer_id = p.client_id
WHERE order_source in ('B2B', 'b2b-api', 'b2b')
  AND client_id IN (141734608, 141734324, 145204508, 143726879)
GROUP BY 1,2,3
HAVING monthly_orders>99)

SELECT order_country_code,
       COUNT (DISTINCT client_name)
FROM monthly_orders_table
GROUP BY 1;

SELECT customer_id,
       MIN(order_created_local_at)
FROM bi_kpis.kpi_orders
WHERE customer_id IN (141734608, 41801335, 141734324, 137626540, 137634386, 137633555, 137633075, 137632642, 145204508, 21294069, 143726879)
GROUP BY 1
ORDER BY 1;

SELECT o.id,
       op.label AS pick_up_address
FROM orders o INNER JOIN order_points op ON o.id = op.order_id
WHERE 1=1
  AND o.creation_time >= '2023-04-16'
  AND o.creation_time < '2023-05-16'
  AND o.customer_id IN (144861767, 143504232, 144861827, 144861256, 144861470, 143504602, 144861903, 143504501, 144861529, 144861942, 144861583, 144861988, 144861635, 143504428, 144861679, 132606786)

SELECT * FROM private_customer.addresses
Limit 10

SELECT o.id,
       a.label AS pick_up_address
FROM orders o
    INNER JOIN order_points op ON o.id = op.order_id
INNER JOIN private_customer.addresses a ON op.id = a.order_point_id
