SELECT before_after_s,
       AVG(sessions_started)
FROM (SELECT customer_id,
             before_after_s,
             COUNT(DISTINCT session_id) AS sessions_started
      FROM (WITH customer_base AS (SELECT id
                                   FROM users
                                   WHERE first_order_time_local BETWEEN '2019-09-01 00:00:00.000000' AND '2019-09-08 00:00:00.000000'
                                     AND first_order_city = 'BCN'
                                   ORDER BY MD5('seed' || id)
                                   LIMIT 100000),

                 orders_tagged AS (WITH customer_base AS (SELECT id
                                                          FROM users
                                                          WHERE first_order_time_local BETWEEN '2019-09-01 00:00:00.000000' AND '2019-09-08 00:00:00.000000'
                                                            AND first_order_city = 'BCN'
                                                          ORDER BY MD5('seed' || id)
                                                          LIMIT 100000),

                                        first_scheduling AS (SELECT DISTINCT customer_id,
                                                                             min(scheduled_time) OVER (partition by customer_id) fo_scheduled
                                                             FROM orders o
                                                             WHERE customer_id IN (SELECT id FROM customer_base)
                                                               AND final_status = 'DeliveredStatus'
                                                               AND scheduled_time IS NOT NULL)

                                   SELECT o.customer_id,
                                          o.id,
                                          o.creation_time,
                                          TO_CHAR(DATE_TRUNC('day', creation_time), 'YYYY-MM-DD') AS creation_day,
                                          scheduled_time,
                                          fs.fo_scheduled,
                                          CASE
                                              WHEN o.creation_time > fo_scheduled AND o.scheduled_time <> fs.fo_scheduled
                                                  THEN 'after_first_s'
                                              WHEN o.creation_time > fo_scheduled AND o.scheduled_time IS NULL
                                                  THEN 'after_first_s'
                                              WHEN o.creation_time < fo_scheduled
                                                  THEN 'before_first_s'
                                              WHEN o.scheduled_time = fo_scheduled THEN 'first_s'
                                              ELSE NULL END                                       AS before_after_s

                                   FROM orders o
                                            JOIN first_scheduling fs
                                                 ON o.customer_id = fs.customer_id)


            SELECT CASE
                       WHEN DATEDIFF('hour', ot.creation_time, lmss.creation_time) <= 2
                           AND ot.creation_time > lmss.creation_time THEN TRUE
                       --WHEN lmss.creation_time < DATEADD('hour', -2, ot.creation_time) THEN TRUE
                       ELSE FALSE END AS is_preordering_session,
                   before_after_s,
                   lmss.customer_id,
                   lmss.session_id

            FROM log_mp_session_start lmss
                     JOIN customer_base cb
                          ON lmss.customer_id = cb.id
                     JOIN orders_tagged ot
                          ON lmss.customer_id = ot.customer_id
                              AND TO_CHAR(DATE_TRUNC('day', lmss.creation_time), 'YYYY-MM-DD') = ot.creation_day
            WHERE is_preordering_session) st1
      GROUP BY 1, 2
      ORDER BY 1, 2 DESC) st2
GROUP BY 1;

WITH first_order AS (
    SELECT customer_id,
           country_code,
           MIN(activation_time_local)                AS first_order_date,
           dateadd('days', 28 * 3, first_order_date) AS three_months_since_1st_order,
           dateadd('days', 28 * 6, first_order_date) AS six_months_since_1st_order,
           dateadd('days', 28 * 9, first_order_date) AS nine_months_since_1st_order
    FROM orders
    WHERE 1 = 1
      AND first_order
      AND final_status = 'DeliveredStatus'
      AND country_code = 'ES'
    GROUP BY 1, 2
    HAVING first_order_date > '2019-04-30'),

     user_sample AS
         (SELECT orders.customer_id
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN first_order_date AND three_months_since_1st_order
                                        THEN orders.id
                                    ELSE NULL END)   AS orders_month_0_2
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN three_months_since_1st_order AND six_months_since_1st_order
                                        THEN orders.id
                                    ELSE NULL END)   AS orders_month_3_5
               , orders_month_0_2 + orders_month_3_5 AS orders_month_0_5
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                                        THEN orders.id
                                    ELSE NULL END)   AS orders_month_6_8
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN first_order_date AND three_months_since_1st_order
                                        THEN sa.store_id
                                    ELSE NULL END)   AS stores_month_0_2
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN three_months_since_1st_order AND six_months_since_1st_order
                                        THEN sa.store_id
                                    ELSE NULL END)   AS stores_month_3_5
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN first_order_date AND six_months_since_1st_order
                                        THEN sa.store_id
                                    ELSE NULL END)   AS stores_month_0_5
               , COUNT(DISTINCT CASE
                                    WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                                        THEN sa.store_id
                                    ELSE NULL END)   AS stores_month_6_8
               , SUM(CASE
                         WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                             THEN orders.total_purchase
                         ELSE NULL END)              AS GMV_month_6_8

          FROM orders
                   LEFT JOIN first_order ON first_order.customer_id = orders.customer_id
                   LEFT JOIN store_addresses sa ON sa.id = orders.store_address_id
              AND final_status = 'DeliveredStatus'
          GROUP BY 1
          HAVING orders_month_0_2 >= 3
             AND orders_month_3_5 >= 6
             AND SUM(CASE WHEN orders.customer_type = 'B2B' THEN 1 ELSE 0 END) = 0
             AND SUM(CASE WHEN orders.is_food = FALSE THEN 1 ELSE 0 END) = 0
          ORDER BY MD5(orders.customer_id)
          LIMIT 100000
         )

SELECT --*FROM user_sample
--/*
       orders_month_0_5,
       stores_month_0_5,
       orders_month_6_8,
       COUNT(DISTINCT customer_id)     AS number_of_customers,
       COALESCE(SUM(GMV_month_6_8), 0) AS GMV_month_6_8
FROM user_sample
GROUP BY 1, 2, 3
ORDER BY 4 DESC;

WITH customer_base AS (WITH first_order AS (
    SELECT customer_id,
           country_code,
           MIN(activation_time_local)                AS first_order_date,
           dateadd('days', 28 * 3, first_order_date) AS three_months_since_1st_order,
           dateadd('days', 28 * 6, first_order_date) AS six_months_since_1st_order,
           dateadd('days', 28 * 9, first_order_date) AS nine_months_since_1st_order
    FROM orders
    WHERE 1 = 1
      AND first_order
      AND final_status = 'DeliveredStatus'
      AND country_code = 'ES'
    GROUP BY 1, 2
    HAVING first_order_date < '2019-04-30'),

                           user_sample AS
                               (SELECT orders.customer_id
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN first_order_date AND three_months_since_1st_order
                                                              THEN orders.id
                                                          ELSE NULL END)                                       AS orders_month_0_2
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN three_months_since_1st_order AND six_months_since_1st_order
                                                              THEN orders.id
                                                          ELSE NULL END)                                       AS orders_month_3_5
                                     , orders_month_0_2 + orders_month_3_5                                     AS orders_month_0_5
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                                                              THEN orders.id
                                                          ELSE NULL END)                                       AS orders_month_6_8
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN first_order_date AND three_months_since_1st_order
                                                              THEN sa.store_id
                                                          ELSE NULL END)                                       AS stores_month_0_2
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN three_months_since_1st_order AND six_months_since_1st_order
                                                              THEN sa.store_id
                                                          ELSE NULL END)                                       AS stores_month_3_5
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN first_order_date AND six_months_since_1st_order
                                                              THEN sa.store_id
                                                          ELSE NULL END)                                       AS stores_month_0_5_pre
                                     , CASE WHEN stores_month_0_5_pre = 0 THEN 1 ELSE stores_month_0_5_pre END AS stores_month_0_5
                                     , COUNT(DISTINCT CASE
                                                          WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                                                              THEN sa.store_id
                                                          ELSE NULL END)                                       AS stores_month_6_8
                                     , SUM(CASE
                                               WHEN activation_time_local BETWEEN six_months_since_1st_order AND nine_months_since_1st_order
                                                   THEN orders.total_purchase
                                               ELSE NULL END)                                                  AS GMV_month_6_8
                                     , GMV_month_6_8 * 1.0 / orders_month_6_8                                  AS AOV_month_6_8


                                FROM orders
                                         LEFT JOIN first_order ON first_order.customer_id = orders.customer_id
                                         LEFT JOIN store_addresses sa ON sa.id = orders.store_address_id
                                    AND final_status = 'DeliveredStatus'
                                GROUP BY 1
                                HAVING 1 = 1
                                   AND orders_month_0_2 >= 3
                                   AND orders_month_3_5 >= 6
                                   AND SUM(CASE WHEN orders.customer_type = 'B2B' THEN 1 ELSE 0 END) = 0
                                   --AND SUM(CASE WHEN orders.is_food = FALSE THEN 1 ELSE 0 END) = 0
                                ORDER BY MD5(orders.customer_id)
                                LIMIT 100000
                               )

                      SELECT customer_id,
                             orders_month_0_5,
                             stores_month_0_5,
                             orders_month_0_5 * 1.0 / stores_month_0_5 AS orders_per_store,
                             CASE
                                 WHEN stores_month_0_5 < 2 THEN 1
                                 ELSE (CASE
                                           WHEN orders_per_store > 1.5 AND orders_per_store <= 2.5 THEN 2
                                           WHEN orders_per_store > 2.5 THEN 3
                                           ELSE 4 END) END             AS customer_group
                      FROM user_sample
                      WHERE customer_group = 1
                      GROUP BY 1, 2, 3, 4, 5)

SELECT s.tags,
       COUNT (DISTINCT o.customer_id)
FROM orders o
JOIN customer_base cb ON o.customer_id = cb.customer_id
JOIN store_addresses sa ON o.store_address_id = sa.id
JOIN stores s ON sa.store_id = s.id
WHERE o.final_status = 'DeliveredStatus'
GROUP BY 1;

SELECT *
FROM stores
WHERE category = 'MCDONALDSES'
ORDER BY random()
--LIMIT 10;

SELECT *
FROM stores
WHERE id = 9487
